// Chtholly.Space Module
// 空间布局模块 - 提供高级布局组件和空间操作功能
// "在这片浮空大陆上，每一寸空间都充满了故事"

[Info] {
    name: "Chtholly.Space"
    version: "1.0.0"
    description: "CHTL空间布局模块，提供灵活的布局组件"
    author: "CHTL Development Team"
    license: "MIT"
}

// 导入核心模块
Import @Chtl from "Chtholly.Core.*"

// Flex布局容器
[Custom] @Element FlexBox {
    props: {
        direction: string = "row"  // row, column, row-reverse, column-reverse
        wrap: string = "nowrap"    // nowrap, wrap, wrap-reverse
        justify: string = "flex-start"  // flex-start, flex-end, center, space-between, space-around, space-evenly
        align: string = "stretch"   // flex-start, flex-end, center, baseline, stretch
        gap: string | number = 0
        padding: string | number = 0
        margin: string | number = 0
    }
    
    render: {
        div {
            class: "chtl-flexbox"
            style: {
                display: "flex"
                flex-direction: props.direction
                flex-wrap: props.wrap
                justify-content: props.justify
                align-items: props.align
                gap: props.gap
                padding: props.padding
                margin: props.margin
            }
            [children]
        }
    }
}

// Grid布局容器
[Custom] @Element GridBox {
    props: {
        columns: string | number = "1fr"
        rows: string | number = "auto"
        gap: string | number = 0
        columnGap: string | number
        rowGap: string | number
        autoFlow: string = "row"  // row, column, dense
        alignItems: string = "stretch"
        justifyItems: string = "stretch"
        padding: string | number = 0
    }
    
    render: {
        div {
            class: "chtl-gridbox"
            style: {
                display: "grid"
                grid-template-columns: props.columns
                grid-template-rows: props.rows
                gap: props.gap
                column-gap: props.columnGap || props.gap
                row-gap: props.rowGap || props.gap
                grid-auto-flow: props.autoFlow
                align-items: props.alignItems
                justify-items: props.justifyItems
                padding: props.padding
            }
            [children]
        }
    }
}

// 定位容器
[Custom] @Element PositionBox {
    props: {
        position: string = "relative"  // static, relative, absolute, fixed, sticky
        top: string | number
        right: string | number
        bottom: string | number
        left: string | number
        zIndex: number = "auto"
        overflow: string = "visible"  // visible, hidden, scroll, auto
    }
    
    render: {
        div {
            class: "chtl-positionbox"
            style: {
                position: props.position
                top: props.top
                right: props.right
                bottom: props.bottom
                left: props.left
                z-index: props.zIndex
                overflow: props.overflow
            }
            [children]
        }
    }
}

// 间距组件
[Custom] @Element Spacer {
    props: {
        size: string | number = "16px"
        direction: string = "vertical"  // vertical, horizontal
        flex: boolean = false
    }
    
    render: {
        div {
            class: "chtl-spacer"
            style: {
                width: props.direction === "horizontal" ? props.size : "1px"
                height: props.direction === "vertical" ? props.size : "1px"
                flex: props.flex ? "1" : "none"
            }
        }
    }
}

// 层叠布局
[Custom] @Element Stack {
    props: {
        spacing: string | number = "16px"
        direction: string = "vertical"  // vertical, horizontal
        align: string = "stretch"
        reverse: boolean = false
    }
    
    render: {
        @Container {
            display: "flex"
            flexDirection: props.reverse ? 
                (props.direction === "vertical" ? "column-reverse" : "row-reverse") :
                (props.direction === "vertical" ? "column" : "row")
            alignItems: props.align
            
            // 为子元素添加间距
            [children].map((child, index) => {
                if (index > 0) {
                    return [
                        @Spacer { 
                            size: props.spacing 
                            direction: props.direction 
                        },
                        child
                    ]
                }
                return child
            })
        }
    }
}

// 居中容器
[Custom] @Element Center {
    props: {
        horizontal: boolean = true
        vertical: boolean = true
        minHeight: string | number
        minWidth: string | number
    }
    
    render: {
        div {
            class: "chtl-center"
            style: {
                display: "flex"
                justify-content: props.horizontal ? "center" : "flex-start"
                align-items: props.vertical ? "center" : "flex-start"
                min-height: props.minHeight
                min-width: props.minWidth
            }
            [children]
        }
    }
}

// 浮动岛屿布局（致敬浮空岛的设定）
[Custom] @Element FloatingIsland {
    props: {
        float: string = "left"  // left, right, none
        drift: boolean = false  // 是否有飘动效果
        shadow: boolean = true
        elevation: number = 1  // 1-5 的高度级别
    }
    
    render: {
        div {
            class: ["chtl-floating-island", props.drift ? "drift-animation" : ""]
            style: {
                float: props.float
                box-shadow: props.shadow ? 
                    `0 ${props.elevation * 2}px ${props.elevation * 4}px rgba(0, 0, 0, ${0.1 + props.elevation * 0.05})` : 
                    "none"
                transition: "all 0.3s ease"
            }
            [children]
        }
    }
}

// 样式定义
[Style] @SpaceStyles {
    .chtl-flexbox {
        box-sizing: border-box;
    }
    
    .chtl-gridbox {
        box-sizing: border-box;
    }
    
    .chtl-positionbox {
        box-sizing: border-box;
    }
    
    .chtl-spacer {
        flex-shrink: 0;
    }
    
    .chtl-center {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
    }
    
    .chtl-floating-island {
        margin: 10px;
        padding: 20px;
        background: white;
        border-radius: 8px;
        position: relative;
    }
    
    .drift-animation {
        animation: drift 6s ease-in-out infinite;
    }
    
    @keyframes drift {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
}

// 空间计算工具函数
[Template] @Function calculateSpace(container, items, spacing) {
    // 计算容器中项目的空间分配
    const totalSpacing = spacing * (items.length - 1)
    const availableSpace = container - totalSpacing
    return availableSpace / items.length
}

[Template] @Function createGrid(columns, rows) {
    // 创建网格模板字符串
    const colTemplate = Array(columns).fill("1fr").join(" ")
    const rowTemplate = Array(rows).fill("1fr").join(" ")
    return {
        columns: colTemplate,
        rows: rowTemplate
    }
}

// 导出空间模块的所有组件
[Export] {
    @Element FlexBox, GridBox, PositionBox, Spacer, Stack, Center, FloatingIsland
    @Style SpaceStyles
    @Var calculateSpace, createGrid
}