#ifndef CHTL_CHTL_CONTEXT_H
#define CHTL_CHTL_CONTEXT_H

#include "Context/BasicContext.h"
#include <set>

namespace chtl {

// 模板信息
struct TemplateInfo {
    enum TemplateType {
        STYLE_TEMPLATE,
        ELEMENT_TEMPLATE,
        VAR_TEMPLATE
    };
    
    TemplateType type;
    std::string name;
    std::unordered_map<std::string, std::string> properties;
    std::vector<std::string> elements;  // 用于元素模板
    std::set<std::string> inheritFrom;   // 继承的模板
    int defineLine;
    int defineColumn;
    
    TemplateInfo() : type(STYLE_TEMPLATE), defineLine(0), defineColumn(0) {}
};

// 自定义信息
struct CustomInfo {
    enum CustomType {
        STYLE_CUSTOM,
        ELEMENT_CUSTOM,
        VAR_CUSTOM
    };
    
    CustomType type;
    std::string name;
    std::unordered_map<std::string, std::string> properties;
    std::vector<std::string> elements;  // 用于元素自定义
    std::set<std::string> inheritFrom;   // 继承的模板或自定义
    bool hasUnsetProperties;  // 是否有未设置值的属性
    int defineLine;
    int defineColumn;
    
    CustomInfo() : type(STYLE_CUSTOM), hasUnsetProperties(false), defineLine(0), defineColumn(0) {}
};

// 命名空间信息
struct NamespaceInfo {
    std::string name;
    std::string fullPath;  // 完整路径，如 "space.room"
    std::unordered_map<std::string, TemplateInfo> templates;
    std::unordered_map<std::string, CustomInfo> customs;
    std::unordered_map<std::string, std::shared_ptr<NamespaceInfo>> subNamespaces;
    std::shared_ptr<NamespaceInfo> parent;
    int defineLine;
    int defineColumn;
    
    NamespaceInfo() : defineLine(0), defineColumn(0) {}
};

// CHTL上下文类
class ChtlContext : public BasicContext {
private:
    // 模板和自定义定义
    std::unordered_map<std::string, TemplateInfo> templates_;
    std::unordered_map<std::string, CustomInfo> customs_;
    
    // 命名空间
    std::shared_ptr<NamespaceInfo> rootNamespace_;
    std::shared_ptr<NamespaceInfo> currentNamespace_;
    
    // 导入的文件
    std::set<std::string> importedFiles_;
    
    // 当前元素栈（用于跟踪嵌套）
    std::stack<std::string> elementStack_;
    
    // 配置组设置
    std::unordered_map<std::string, std::vector<std::string>> keywordAliases_;
    
    // 约束规则
    struct ConstraintRule {
        std::set<std::string> exceptElements;
        std::set<std::string> exceptTypes;
        ScopeType scope;
    };
    std::vector<ConstraintRule> constraints_;
    
    // 自动生成的类名/ID
    std::set<std::string> autoGeneratedClasses_;
    std::set<std::string> autoGeneratedIds_;
    
public:
    ChtlContext();
    
    // 重写基类方法
    bool validate() override;
    void reset() override;
    void printDebugInfo() const override;
    
    // 模板查询
    void registerTemplate(const std::string& name, const TemplateInfo& info);
    bool hasTemplate(const std::string& name) const;
    TemplateInfo* getTemplate(const std::string& name);
    const TemplateInfo* getTemplateInfo(const std::string& name) const;
    std::shared_ptr<Node> getTemplate(const std::string& name) const override;
    
    // 自定义查询
    void registerCustom(const std::string& name, const CustomInfo& info);
    bool hasCustom(const std::string& name) const;
    CustomInfo* getCustom(const std::string& name);
    const CustomInfo* getCustomInfo(const std::string& name) const;
    std::shared_ptr<Node> getCustom(const std::string& name) const override;
    
    // 命名空间管理
    void enterNamespace(const std::string& name);
    void exitNamespace();
    std::string getCurrentNamespacePath() const;
    std::shared_ptr<NamespaceInfo> getCurrentNamespace() { return currentNamespace_; }
    
    // 导入管理
    bool addImport(const std::string& filePath);
    bool isImported(const std::string& filePath) const;
    const std::set<std::string>& getImportedFiles() const { return importedFiles_; }
    
    // 元素栈管理
    void pushElement(const std::string& element);
    void popElement();
    std::string getCurrentElement() const;
    bool isInElement(const std::string& element) const;
    
    // 配置组管理
    void addKeywordAlias(const std::string& keyword, const std::string& alias);
    void setKeywordAliases(const std::string& keyword, const std::vector<std::string>& aliases);
    std::vector<std::string> getKeywordAliases(const std::string& keyword) const;
    
    // 约束管理
    void addConstraint(const ConstraintRule& rule);
    bool checkConstraint(const std::string& element) const;
    bool checkConstraint(TokenType type) const;
    
    // 自动生成的类名/ID管理
    void addAutoGeneratedClass(const std::string& className);
    void addAutoGeneratedId(const std::string& id);
    bool isAutoGeneratedClass(const std::string& className) const;
    bool isAutoGeneratedId(const std::string& id) const;
    
    // 验证方法
    bool validateTemplate(const TemplateInfo& info) const;
    bool validateCustom(const CustomInfo& info) const;
    bool validateInheritance(const std::set<std::string>& inheritFrom, bool isTemplate) const;
    
    // 查找方法（支持命名空间）
    TemplateInfo* lookupTemplate(const std::string& name, const std::string& namespacePath = "");
    CustomInfo* lookupCustom(const std::string& name, const std::string& namespacePath = "");
    
private:
    // 辅助方法
    std::shared_ptr<NamespaceInfo> findOrCreateNamespace(const std::string& path);
    std::shared_ptr<NamespaceInfo> findNamespace(const std::string& path) const;
    void collectAllTemplates(std::unordered_map<std::string, TemplateInfo>& result) const;
    void collectAllCustoms(std::unordered_map<std::string, CustomInfo>& result) const;
};

} // namespace chtl

#endif // CHTL_CHTL_CONTEXT_H