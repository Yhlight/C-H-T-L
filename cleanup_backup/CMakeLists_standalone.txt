cmake_minimum_required(VERSION 3.16)
project(CHTL VERSION 1.0.0 LANGUAGES CXX)

# C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")

# 输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# 包含目录
include_directories(
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/include
)

# 收集源文件
file(GLOB_RECURSE CHTL_CORE_SOURCES
    src/chtl/core/*.cpp
    src/chtl/generator/*.cpp
    src/chtl/scanner/*.cpp
    src/chtl/template/*.cpp
    src/chtl/custom/*.cpp
    src/chtl/origin/*.cpp
    src/chtl/import/*.cpp
    src/chtl/namespace/*.cpp
    src/chtl/constraint/*.cpp
    src/chtl/module/*.cpp
    src/chtl/optimizer/*.cpp
    src/chtl/error/*.cpp
    src/chtl/utils/*.cpp
    src/chtl/config/*.cpp
)

# 独立解析器源文件
file(GLOB_RECURSE CHTL_PARSER_SOURCES
    src/chtl/parser/standalone/*.cpp
)

# 主程序源文件
set(CHTL_MAIN_SOURCES
    src/chtl/CHTL*.cpp
    src/main.cpp
)

# 排除依赖ANTLR4的文件
list(FILTER CHTL_MAIN_SOURCES EXCLUDE REGEX ".*Parser.*")
list(FILTER CHTL_MAIN_SOURCES EXCLUDE REGEX ".*Lexer.*")
list(FILTER CHTL_MAIN_SOURCES EXCLUDE REGEX ".*Listener.*")
list(FILTER CHTL_MAIN_SOURCES EXCLUDE REGEX ".*Visitor.*")

# 创建静态库
add_library(chtl_core STATIC
    ${CHTL_CORE_SOURCES}
    ${CHTL_PARSER_SOURCES}
)

# 创建可执行文件
add_executable(chtl
    ${CHTL_MAIN_SOURCES}
)

# 链接库
target_link_libraries(chtl
    chtl_core
    pthread
)

# 安装规则
install(TARGETS chtl
    RUNTIME DESTINATION bin
)

install(DIRECTORY include/chtl
    DESTINATION include
)

install(DIRECTORY lib/chtl
    DESTINATION lib
)

# 标准库
install(DIRECTORY ${CMAKE_SOURCE_DIR}/lib/chtl
    DESTINATION share/chtl/lib
)

# 示例
install(DIRECTORY ${CMAKE_SOURCE_DIR}/examples
    DESTINATION share/chtl
)

# 文档
install(DIRECTORY ${CMAKE_SOURCE_DIR}/docs
    DESTINATION share/chtl
)

# CPack配置
set(CPACK_PACKAGE_NAME "CHTL")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "C++ Hypertext Language Compiler")
set(CPACK_PACKAGE_VENDOR "CHTL Team")
set(CPACK_PACKAGE_CONTACT "support@chtl.org")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")

# 平台特定配置
if(WIN32)
    set(CPACK_GENERATOR "ZIP")
elseif(APPLE)
    set(CPACK_GENERATOR "TGZ")
else()
    set(CPACK_GENERATOR "TGZ;DEB;RPM")
endif()

include(CPack)

# 测试
enable_testing()

# 单元测试
file(GLOB_RECURSE TEST_SOURCES tests/unit/*.cpp)
foreach(test_source ${TEST_SOURCES})
    get_filename_component(test_name ${test_source} NAME_WE)
    add_executable(${test_name} ${test_source})
    target_link_libraries(${test_name} chtl_core pthread)
    add_test(NAME ${test_name} COMMAND ${test_name})
endforeach()

# 显示配置信息
message(STATUS "")
message(STATUS "CHTL Configuration:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  ANTLR4: NOT REQUIRED (Standalone)")
message(STATUS "")