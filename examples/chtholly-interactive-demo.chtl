// 珂朵莉交互组件演示
// 展示使用局部script块的交互式组件

Import @Interactive from "Chtholly.Interactive.*"
Import @Core from "Chtholly.Core.*"

div {
    class: "demo-container"
    
    h1 { "珂朵莉交互组件演示" }
    p { "使用局部script块实现的丰富交互效果" }
    
    // Tooltip演示
    section {
        h2 { "Tooltip 提示框" }
        
        div {
            class: "demo-row"
            
            @Tooltip {
                content: "这是一个顶部提示"
                position: "top"
                
                @Button { "悬停显示提示" }
            }
            
            @Tooltip {
                content: "点击显示的提示"
                position: "right"
                trigger: "click"
                
                @Button { type: "secondary"; "点击显示提示" }
            }
            
            @Tooltip {
                content: "延迟500ms显示"
                position: "bottom"
                delay: 500
                
                @Button { type: "danger"; "延迟显示提示" }
            }
        }
    }
    
    // Dropdown演示
    section {
        h2 { "Dropdown 下拉菜单" }
        
        div {
            class: "demo-row"
            
            @Dropdown {
                trigger: @Button { "选择操作 ▼" }
                items: [
                    { label: "编辑", value: "edit", icon: "✏️" },
                    { label: "复制", value: "copy", icon: "📋" },
                    { label: "删除", value: "delete", icon: "🗑️", disabled: true },
                    { label: "导出", value: "export", icon: "📤" }
                ]
                onSelect: (item) => {
                    alert(`选择了: ${item.label}`);
                }
            }
            
            @Dropdown {
                trigger: @Button { type: "secondary"; "右对齐菜单 ▼" }
                align: "right"
                items: [
                    { label: "个人中心", value: "profile" },
                    { label: "账号设置", value: "settings" },
                    { label: "退出登录", value: "logout" }
                ]
                onSelect: (item) => {
                    console.log("Selected:", item);
                }
            }
        }
    }
    
    // Modal演示
    section {
        h2 { "Modal 模态框" }
        
        div {
            class: "demo-row"
            id: "modal-demo"
            
            script {
                // 模态框状态管理
                this.modalStates = {
                    basic: false,
                    centered: false,
                    noMask: false
                };
                
                this.openModal = (type) => {
                    this.modalStates[type] = true;
                    this.forceUpdate();
                };
                
                this.closeModal = (type) => {
                    this.modalStates[type] = false;
                    this.forceUpdate();
                };
                
                this.forceUpdate = () => {
                    // 触发重新渲染的逻辑
                    {{&}}->dispatchEvent(new Event('update'));
                };
            }
            
            @Button {
                onclick: () => this.openModal('basic')
                "打开基础模态框"
            }
            
            @Button {
                type: "secondary"
                onclick: () => this.openModal('centered')
                "居中模态框"
            }
            
            @Button {
                type: "danger"
                onclick: () => this.openModal('noMask')
                "不可点击遮罩关闭"
            }
            
            // 基础模态框
            @Modal {
                open: this.modalStates.basic
                title: "基础模态框"
                onClose: () => this.closeModal('basic')
                
                p { "这是一个基础的模态框示例。" }
                p { "按ESC键或点击关闭按钮可以关闭。" }
                
                div {
                    class: "modal-footer"
                    @Button { 
                        type: "secondary"
                        onclick: () => this.closeModal('basic')
                        "取消" 
                    }
                    @Button { 
                        onclick: () => {
                            alert("确认操作");
                            this.closeModal('basic');
                        }
                        "确认" 
                    }
                }
            }
            
            // 居中模态框
            @Modal {
                open: this.modalStates.centered
                title: "居中显示的模态框"
                centered: true
                onClose: () => this.closeModal('centered')
                width: "400px"
                
                p { "这个模态框会在屏幕中央显示。" }
                
                script {
                    // 模态框内的动画效果
                    {{".modal-content-animation"}}->animate({
                        duration: 1000,
                        easing: 'ease-in-out',
                        begin: { opacity: 0, transform: 'translateY(20px)' },
                        end: { opacity: 1, transform: 'translateY(0)' },
                        loop: -1,
                        direction: 'alternate'
                    });
                }
                
                div {
                    class: "modal-content-animation"
                    style: {
                        padding: "20px"
                        background: "#f0f0f0"
                        borderRadius: "4px"
                        textAlign: "center"
                    }
                    "动画内容"
                }
            }
            
            // 不可点击遮罩关闭
            @Modal {
                open: this.modalStates.noMask
                title: "重要操作确认"
                maskClosable: false
                onClose: () => this.closeModal('noMask')
                
                p { "⚠️ 这是一个重要操作，点击遮罩无法关闭。" }
                p { "只能通过关闭按钮或确认/取消按钮关闭。" }
                
                div {
                    class: "modal-footer"
                    @Button { 
                        type: "danger"
                        onclick: () => this.closeModal('noMask')
                        "我知道了" 
                    }
                }
            }
        }
    }
    
    // Tabs演示
    section {
        h2 { "Tabs 选项卡" }
        
        @Tabs {
            items: [
                {
                    key: "intro",
                    label: "简介",
                    content: div {
                        h3 { "珂朵莉·诺塔·瑟尼欧里斯" }
                        p { "「即使是再微小的相遇与离别，也会在心中留下色彩」" }
                        p { "珂朵莉是一位黄金妖精，拥有美丽的蓝色长发和温柔的性格。" }
                    }
                },
                {
                    key: "features",
                    label: "特性",
                    content: div {
                        h3 { "组件特性" }
                        ul {
                            li { "使用局部script块实现交互" }
                            li { "支持CHTL JS增强语法" }
                            li { "内置动画效果" }
                            li { "完全响应式设计" }
                        }
                    }
                },
                {
                    key: "code",
                    label: "代码示例",
                    content: div {
                        h3 { "使用示例" }
                        pre {
                            code {
                                `@Tooltip {
    content: "提示内容"
    position: "top"
    
    @Button { "悬停我" }
}`
                            }
                        }
                    }
                },
                {
                    key: "disabled",
                    label: "禁用项",
                    disabled: true,
                    content: div { "这个选项卡被禁用了" }
                }
            ]
            onChange: (key) => {
                console.log("切换到:", key);
            }
        }
        
        h3 { "卡片式选项卡" }
        
        @Tabs {
            type: "card"
            items: [
                {
                    key: "memory",
                    label: "记忆",
                    content: div {
                        p { "珂朵莉的记忆逐渐被侵蚀..." }
                        script {
                            // 渐变动画效果
                            {{&}}->animate({
                                duration: 3000,
                                easing: 'ease-in-out',
                                begin: { opacity: 1 },
                                when: [
                                    { at: 0.5, opacity: 0.3 }
                                ],
                                end: { opacity: 1 },
                                loop: -1
                            });
                        }
                    }
                },
                {
                    key: "happiness",
                    label: "幸福",
                    content: div {
                        p { "「能够遇见你，是我最幸福的事」" }
                        p { "即使时间有限，每一刻都值得珍惜。" }
                    }
                }
            ]
        }
    }
    
    style {
        .demo-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        }
        
        section {
            margin-bottom: 60px;
            padding: 30px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #67C3CC;
            text-align: center;
            margin-bottom: 20px;
        }
        
        h2 {
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #67C3CC;
        }
        
        .demo-row {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            align-items: center;
            margin: 20px 0;
        }
        
        .modal-footer {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #f0f0f0;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        pre {
            background: #f5f5f5;
            padding: 15px;
            border-radius: 4px;
            overflow-x: auto;
        }
        
        code {
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
        }
        
        body {
            background: #f0f2f5;
            margin: 0;
        }
    }
}