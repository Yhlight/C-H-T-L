// CHTL JS增强语法完整示例
// 展示增强选择器、listen、animate等特性

Import @Chtl from "Chtholly.Core.*"

// 1. 增强选择器示例
div {
    id: "selector-demo"
    class: "demo-section"
    
    h2 { "增强选择器" }
    
    div {
        class: "box"
        id: "special-box"
        "这是一个特殊的盒子"
    }
    
    button { class: "btn"; "按钮 1" }
    button { class: "btn"; "按钮 2" }
    button { class: "btn"; "按钮 3" }
    
    script {
        // 无修饰符选择器：标签 -> ID -> 类
        {{box}}->style.border = "2px solid red";  // 先找标签<box>，再找id="box"，最后找class="box"
        
        // 明确的类选择器
        {{.box}}->style.padding = "20px";
        
        // 明确的ID选择器
        {{#special-box}}->style.backgroundColor = "#f0f0f0";
        
        // 标签选择器
        {{button}}->forEach(btn => {
            btn->style.margin = "5px";
        });
        
        // 精确索引访问
        {{button[0]}}->textContent = "第一个按钮";
        {{button[1]}}->style.color = "blue";
        
        // 复合选择器
        {{.demo-section button}}->forEach(btn => {
            btn->classList.add("demo-button");
        });
    }
    
    style {
        .demo-section {
            margin: 20px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        
        .box {
            margin: 10px 0;
            padding: 10px;
            background: white;
        }
        
        .btn {
            padding: 8px 16px;
            background: #67C3CC;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    }
}

// 2. listen方法示例
div {
    class: "listen-demo"
    
    h2 { "快捷事件绑定 - listen" }
    
    div {
        id: "interactive-box"
        class: "interactive"
        "鼠标交互测试"
    }
    
    input {
        type: "text"
        id: "user-input"
        placeholder: "输入测试..."
    }
    
    script {
        // 使用listen进行多事件绑定
        {{#interactive-box}}->listen({
            click: function() {
                this->style.backgroundColor = '#' + Math.floor(Math.random()*16777215).toString(16);
            },
            
            mouseenter: () => {
                {{#interactive-box}}->style.transform = "scale(1.1)";
            },
            
            mouseleave: function() {
                this->style.transform = "scale(1)";
            },
            
            dblclick: function(e) {
                alert("双击了盒子！");
            }
        });
        
        // 输入框事件
        {{#user-input}}->listen({
            focus: function() {
                this->style.borderColor = "#67C3CC";
            },
            
            blur: function() {
                this->style.borderColor = "#ddd";
            },
            
            input: function(e) {
                console.log("输入内容:", e.target.value);
            }
        });
    }
    
    style {
        .listen-demo {
            margin: 20px;
            padding: 20px;
            background: #f5f5f5;
            border-radius: 8px;
        }
        
        .interactive {
            width: 200px;
            height: 100px;
            background: #67C3CC;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
            margin: 20px 0;
        }
        
        input {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 4px;
            transition: border-color 0.3s;
        }
    }
}

// 3. animate动画示例
div {
    class: "animate-demo"
    
    h2 { "动画系统 - animate" }
    
    div {
        id: "animated-box"
        class: "anim-box"
        "点击播放动画"
    }
    
    button {
        id: "play-animation"
        "播放动画"
    }
    
    script {
        // 定义动画
        {{#play-animation}}->listen({
            click: () => {
                {{#animated-box}}->animate({
                    duration: 2000,
                    easing: 'ease-in-out',
                    
                    begin: {
                        opacity: 1,
                        transform: 'scale(1) rotate(0deg)'
                    },
                    
                    when: [
                        {
                            at: 0.25,
                            opacity: 0.8,
                            transform: 'scale(1.2) rotate(90deg)'
                        },
                        {
                            at: 0.5,
                            opacity: 0.6,
                            transform: 'scale(0.8) rotate(180deg)'
                        },
                        {
                            at: 0.75,
                            opacity: 0.8,
                            transform: 'scale(1.1) rotate(270deg)'
                        }
                    ],
                    
                    end: {
                        opacity: 1,
                        transform: 'scale(1) rotate(360deg)'
                    },
                    
                    loop: 2,
                    direction: 'normal',
                    delay: 500,
                    callback: function() {
                        alert("动画播放完成！");
                    }
                });
            }
        });
        
        // 悬停动画
        {{#animated-box}}->listen({
            mouseenter: function() {
                this->animate({
                    duration: 300,
                    easing: 'ease-out',
                    begin: {
                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                    },
                    end: {
                        boxShadow: '0 8px 16px rgba(0,0,0,0.2)'
                    }
                });
            },
            
            mouseleave: function() {
                this->animate({
                    duration: 300,
                    easing: 'ease-out',
                    begin: {
                        boxShadow: '0 8px 16px rgba(0,0,0,0.2)'
                    },
                    end: {
                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                    }
                });
            }
        });
    }
    
    style {
        .animate-demo {
            margin: 20px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .anim-box {
            width: 150px;
            height: 150px;
            background: linear-gradient(45deg, #67C3CC, #5AB3BC);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px auto;
            cursor: pointer;
            border-radius: 8px;
        }
        
        #play-animation {
            display: block;
            margin: 20px auto;
            padding: 10px 30px;
            background: #67C3CC;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        
        #play-animation:hover {
            background: #5AB3BC;
        }
    }
}

// 4. 组合使用示例
div {
    class: "combined-demo"
    
    h2 { "综合示例" }
    
    div {
        class: "card-container"
        
        // 动态创建卡片
        script {
            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#DDA0DD'];
            
            for (let i = 0; i < 5; i++) {
                const card = document.createElement('div');
                card.className = 'card';
                card.style.backgroundColor = colors[i];
                card.innerHTML = `<h3>卡片 ${i + 1}</h3><p>点击查看动画</p>`;
                {{&}}.appendChild(card);
            }
            
            // 使用事件委托和动画
            {{&}}->delegate({
                target: '.card',
                click: function() {
                    const originalColor = this.style.backgroundColor;
                    
                    this->animate({
                        duration: 600,
                        easing: 'ease-in-out',
                        begin: {
                            transform: 'rotateY(0deg)',
                            backgroundColor: originalColor
                        },
                        when: [{
                            at: 0.5,
                            transform: 'rotateY(180deg)',
                            backgroundColor: '#67C3CC'
                        }],
                        end: {
                            transform: 'rotateY(360deg)',
                            backgroundColor: originalColor
                        },
                        callback: () => {
                            console.log("卡片翻转完成");
                        }
                    });
                }
            });
            
            // 悬停效果
            {{.card}}->forEach(card => {
                card->listen({
                    mouseenter: function() {
                        this->style.transform = 'translateY(-5px)';
                        this->style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)';
                    },
                    mouseleave: function() {
                        this->style.transform = 'translateY(0)';
                        this->style.boxShadow = '0 2px 5px rgba(0,0,0,0.1)';
                    }
                });
            });
        }
    }
    
    style {
        .combined-demo {
            margin: 20px;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 8px;
        }
        
        .card-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .card {
            padding: 20px;
            text-align: center;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            perspective: 1000px;
        }
        
        .card h3 {
            margin: 0 0 10px;
        }
        
        .card p {
            margin: 0;
            font-size: 14px;
            opacity: 0.9;
        }
    }
}

// 全局样式
style {
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        padding: 20px;
        background: #e9ecef;
    }
    
    h2 {
        color: #333;
        margin-bottom: 20px;
    }
}