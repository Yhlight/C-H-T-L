// Chtholly Core Module
// 珂朵莉核心模块 - 提供CHTL的基础功能
// "即使是再微小的相遇与离别，也会在心中留下色彩"

[Info] {
    name: "Chtholly.Core"
    version: "1.0.0"
    description: "CHTL核心模块，提供基础组件和功能"
    author: "CHTL Development Team"
    license: "MIT"
}

// 导入基础依赖
Import @Chtl from "chtholly/base"
Import @Style from "chtholly/styles"

// 核心组件定义
[Custom] @Element Container {
    // 容器组件 - 用于包装其他元素
    props: {
        width: string | number
        height: string | number
        padding: string | number
        margin: string | number
        display: string = "block"
        flexDirection: string = "row"
        justifyContent: string = "flex-start"
        alignItems: string = "stretch"
    }
    
    render: {
        div {
            class: "chtl-container"
            style: {
                width: props.width
                height: props.height
                padding: props.padding
                margin: props.margin
                display: props.display
                flex-direction: props.flexDirection
                justify-content: props.justifyContent
                align-items: props.alignItems
            }
            [children]
        }
    }
}

[Custom] @Element Box {
    // 盒子组件 - 基础布局组件
    props: {
        size: string | number
        color: string = "transparent"
        radius: string | number = 0
        shadow: string
    }
    
    render: {
        div {
            class: "chtl-box"
            style: {
                width: props.size
                height: props.size
                background-color: props.color
                border-radius: props.radius
                box-shadow: props.shadow
            }
            [children]
        }
    }
}

[Custom] @Element Text {
    // 文本组件 - 用于显示文本内容
    props: {
        size: string | number = "16px"
        color: string = "#333"
        weight: string | number = "normal"
        align: string = "left"
        lineHeight: string | number = 1.5
    }
    
    render: {
        span {
            class: "chtl-text"
            style: {
                font-size: props.size
                color: props.color
                font-weight: props.weight
                text-align: props.align
                line-height: props.lineHeight
            }
            [children]
        }
    }
}

[Custom] @Element Button {
    // 按钮组件 - 交互式按钮
    props: {
        type: string = "primary"
        size: string = "medium"
        disabled: boolean = false
        loading: boolean = false
        onClick: function
    }
    
    render: {
        button {
            class: [
                "chtl-button", 
                "chtl-button-" + props.type, 
                "chtl-button-" + props.size,
                props.loading ? "chtl-button-loading" : ""
            ]
            disabled: props.disabled || props.loading
            
            script {
                // 点击波纹效果
                {{&}}->listen({
                    click: function(e) {
                        if ({{props.disabled}} || {{props.loading}}) return;
                        
                        // 创建波纹元素
                        const ripple = document.createElement('span');
                        ripple.className = 'chtl-button-ripple';
                        
                        // 计算波纹位置
                        const rect = {{&}}.getBoundingClientRect();
                        const size = Math.max(rect.width, rect.height);
                        const x = e.clientX - rect.left - size / 2;
                        const y = e.clientY - rect.top - size / 2;
                        
                        ripple.style.width = ripple.style.height = size + 'px';
                        ripple.style.left = x + 'px';
                        ripple.style.top = y + 'px';
                        
                        {{&}}.appendChild(ripple);
                        
                        // 动画结束后移除
                        setTimeout(() => ripple.remove(), 600);
                        
                        // 触发onClick事件
                        {{props.onClick}}?.(e);
                    },
                    
                    mousedown: function() {
                        if (!{{props.disabled}} && !{{props.loading}}) {
                            {{&}}.classList.add('pressed');
                        }
                    },
                    
                    mouseup: function() {
                        {{&}}.classList.remove('pressed');
                    },
                    
                    mouseleave: function() {
                        {{&}}.classList.remove('pressed');
                    }
                });
                
                // 键盘支持
                {{&}}->listen({
                    keydown: function(e) {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            {{&}}.classList.add('pressed');
                        }
                    },
                    
                    keyup: function(e) {
                        if (e.key === 'Enter' || e.key === ' ') {
                            {{&}}.classList.remove('pressed');
                            {{&}}.click();
                        }
                    }
                });
            }
            
            if (props.loading) {
                span { class: "chtl-button-loading-icon"; "⟳" }
            }
            [children]
        }
    }
}

// 核心样式定义
[Style] @CoreStyles {
    .chtl-container {
        box-sizing: border-box;
        position: relative;
    }
    
    .chtl-box {
        box-sizing: border-box;
        transition: all 0.3s ease;
    }
    
    .chtl-text {
        display: inline-block;
        transition: color 0.3s ease;
    }
    
    .chtl-button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: inherit;
        outline: none;
        position: relative;
        overflow: hidden;
    }
    
    .chtl-button.pressed {
        transform: scale(0.98);
    }
    
    .chtl-button-ripple {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.5);
        transform: scale(0);
        animation: chtl-ripple 0.6s ease-out;
        pointer-events: none;
    }
    
    @keyframes chtl-ripple {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
    
    .chtl-button-loading {
        pointer-events: none;
        color: transparent;
    }
    
    .chtl-button-loading-icon {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        animation: chtl-spin 1s linear infinite;
        color: currentColor;
        font-size: 1.2em;
    }
    
    @keyframes chtl-spin {
        from { transform: translate(-50%, -50%) rotate(0deg); }
        to { transform: translate(-50%, -50%) rotate(360deg); }
    }
    
    .chtl-button:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }
    
    .chtl-button:active:not(:disabled) {
        transform: translateY(0);
    }
    
    .chtl-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    // 按钮类型样式
    .chtl-button-primary {
        background-color: #67C3CC;
        color: white;
    }
    
    .chtl-button-secondary {
        background-color: #E8E8E8;
        color: #333;
    }
    
    .chtl-button-danger {
        background-color: #FF6B6B;
        color: white;
    }
    
    // 按钮尺寸样式
    .chtl-button-small {
        padding: 4px 12px;
        font-size: 14px;
    }
    
    .chtl-button-medium {
        padding: 8px 16px;
        font-size: 16px;
    }
    
    .chtl-button-large {
        padding: 12px 24px;
        font-size: 18px;
    }
}

// 核心工具函数
[Template] @Function createElement(tag, props, children) {
    // 创建元素的工具函数
    return {
        tag: tag,
        props: props || {},
        children: children || []
    }
}

[Template] @Function Fragment(props) {
    // Fragment组件 - 用于返回多个元素
    return props.children
}

// 导出核心组件和功能
[Export] {
    @Element Container, Box, Text, Button
    @Style CoreStyles
    @Var createElement, Fragment
}