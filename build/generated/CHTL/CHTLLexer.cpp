
// Generated from /workspace/grammar/CHTL.g4 by ANTLR 4.13.1


#include "CHTLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CHTLLexerStaticData final {
  CHTLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CHTLLexerStaticData(const CHTLLexerStaticData&) = delete;
  CHTLLexerStaticData(CHTLLexerStaticData&&) = delete;
  CHTLLexerStaticData& operator=(const CHTLLexerStaticData&) = delete;
  CHTLLexerStaticData& operator=(CHTLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag chtllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CHTLLexerStaticData *chtllexerLexerStaticData = nullptr;

void chtllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (chtllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(chtllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CHTLLexerStaticData>(
    std::vector<std::string>{
      "TEXT", "STYLE", "SCRIPT", "TEMPLATE", "CUSTOM", "ORIGIN", "IMPORT", 
      "NAMESPACE", "CONFIGURATION", "NAME", "INFO", "EXPORT", "AT_STYLE", 
      "AT_ELEMENT", "AT_VAR", "AT_HTML", "AT_JAVASCRIPT", "AT_CHTL", "INHERIT", 
      "DELETE", "INSERT", "AFTER", "BEFORE", "REPLACE", "AT", "TOP", "BOTTOM", 
      "FROM", "AS", "EXCEPT", "BOOLEAN", "COLON", "SEMICOLON", "EQUALS", 
      "COMMA", "DOT", "HASH", "AMPERSAND", "MINUS", "LBRACE", "RBRACE", 
      "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "LINE_COMMENT", "BLOCK_COMMENT", 
      "GENERATOR_COMMENT", "STRING_LITERAL", "SINGLE_STRING_LITERAL", "IDENTIFIER", 
      "NUMBER", "UNQUOTED_LITERAL", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'text'", "'style'", "'script'", "'Template'", "'Custom'", "'Origin'", 
      "'Import'", "'Namespace'", "'Configuration'", "'Name'", "'Info'", 
      "'Export'", "", "'@Element'", "'@Var'", "'@Html'", "'@JavaScript'", 
      "'@Chtl'", "'inherit'", "'delete'", "'insert'", "'after'", "'before'", 
      "'replace'", "'at'", "'top'", "'bottom'", "'from'", "'as'", "'except'", 
      "", "':'", "';'", "'='", "','", "'.'", "'#'", "'&'", "'-'", "'{'", 
      "'}'", "'['", "']'", "'('", "')'"
    },
    std::vector<std::string>{
      "", "TEXT", "STYLE", "SCRIPT", "TEMPLATE", "CUSTOM", "ORIGIN", "IMPORT", 
      "NAMESPACE", "CONFIGURATION", "NAME", "INFO", "EXPORT", "AT_STYLE", 
      "AT_ELEMENT", "AT_VAR", "AT_HTML", "AT_JAVASCRIPT", "AT_CHTL", "INHERIT", 
      "DELETE", "INSERT", "AFTER", "BEFORE", "REPLACE", "AT", "TOP", "BOTTOM", 
      "FROM", "AS", "EXCEPT", "BOOLEAN", "COLON", "SEMICOLON", "EQUALS", 
      "COMMA", "DOT", "HASH", "AMPERSAND", "MINUS", "LBRACE", "RBRACE", 
      "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "LINE_COMMENT", "BLOCK_COMMENT", 
      "GENERATOR_COMMENT", "STRING_LITERAL", "SINGLE_STRING_LITERAL", "IDENTIFIER", 
      "NUMBER", "UNQUOTED_LITERAL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,54,461,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
  	8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
  	1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,223,8,12,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
  	1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,3,30,344,8,30,1,31,1,31,1,32,1,32,1,33,1,33,
  	1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
  	1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,5,45,378,
  	8,45,10,45,12,45,381,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,389,8,46,
  	10,46,12,46,392,9,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,
  	403,8,47,10,47,12,47,406,9,47,1,48,1,48,1,48,1,48,5,48,412,8,48,10,48,
  	12,48,415,9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,423,8,49,10,49,12,49,
  	426,9,49,1,49,1,49,1,50,1,50,5,50,432,8,50,10,50,12,50,435,9,50,1,51,
  	4,51,438,8,51,11,51,12,51,439,1,51,1,51,4,51,444,8,51,11,51,12,51,445,
  	3,51,448,8,51,1,52,4,52,451,8,52,11,52,12,52,452,1,53,4,53,456,8,53,11,
  	53,12,53,457,1,53,1,53,1,390,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
  	17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
  	41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
  	32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
  	87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
  	1,0,8,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,4,0,10,10,13,13,39,
  	39,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
  	12,0,9,10,13,13,32,32,34,34,39,41,44,44,58,59,61,61,91,91,93,93,123,123,
  	125,125,3,0,9,10,13,13,32,32,478,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
  	0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
  	0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
  	0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
  	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
  	0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
  	0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,
  	71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
  	0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
  	0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
  	103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,114,1,0,0,0,5,
  	120,1,0,0,0,7,127,1,0,0,0,9,136,1,0,0,0,11,143,1,0,0,0,13,150,1,0,0,0,
  	15,157,1,0,0,0,17,167,1,0,0,0,19,181,1,0,0,0,21,186,1,0,0,0,23,191,1,
  	0,0,0,25,222,1,0,0,0,27,224,1,0,0,0,29,233,1,0,0,0,31,238,1,0,0,0,33,
  	244,1,0,0,0,35,256,1,0,0,0,37,262,1,0,0,0,39,270,1,0,0,0,41,277,1,0,0,
  	0,43,284,1,0,0,0,45,290,1,0,0,0,47,297,1,0,0,0,49,305,1,0,0,0,51,308,
  	1,0,0,0,53,312,1,0,0,0,55,319,1,0,0,0,57,324,1,0,0,0,59,327,1,0,0,0,61,
  	343,1,0,0,0,63,345,1,0,0,0,65,347,1,0,0,0,67,349,1,0,0,0,69,351,1,0,0,
  	0,71,353,1,0,0,0,73,355,1,0,0,0,75,357,1,0,0,0,77,359,1,0,0,0,79,361,
  	1,0,0,0,81,363,1,0,0,0,83,365,1,0,0,0,85,367,1,0,0,0,87,369,1,0,0,0,89,
  	371,1,0,0,0,91,373,1,0,0,0,93,384,1,0,0,0,95,398,1,0,0,0,97,407,1,0,0,
  	0,99,418,1,0,0,0,101,429,1,0,0,0,103,437,1,0,0,0,105,450,1,0,0,0,107,
  	455,1,0,0,0,109,110,5,116,0,0,110,111,5,101,0,0,111,112,5,120,0,0,112,
  	113,5,116,0,0,113,2,1,0,0,0,114,115,5,115,0,0,115,116,5,116,0,0,116,117,
  	5,121,0,0,117,118,5,108,0,0,118,119,5,101,0,0,119,4,1,0,0,0,120,121,5,
  	115,0,0,121,122,5,99,0,0,122,123,5,114,0,0,123,124,5,105,0,0,124,125,
  	5,112,0,0,125,126,5,116,0,0,126,6,1,0,0,0,127,128,5,84,0,0,128,129,5,
  	101,0,0,129,130,5,109,0,0,130,131,5,112,0,0,131,132,5,108,0,0,132,133,
  	5,97,0,0,133,134,5,116,0,0,134,135,5,101,0,0,135,8,1,0,0,0,136,137,5,
  	67,0,0,137,138,5,117,0,0,138,139,5,115,0,0,139,140,5,116,0,0,140,141,
  	5,111,0,0,141,142,5,109,0,0,142,10,1,0,0,0,143,144,5,79,0,0,144,145,5,
  	114,0,0,145,146,5,105,0,0,146,147,5,103,0,0,147,148,5,105,0,0,148,149,
  	5,110,0,0,149,12,1,0,0,0,150,151,5,73,0,0,151,152,5,109,0,0,152,153,5,
  	112,0,0,153,154,5,111,0,0,154,155,5,114,0,0,155,156,5,116,0,0,156,14,
  	1,0,0,0,157,158,5,78,0,0,158,159,5,97,0,0,159,160,5,109,0,0,160,161,5,
  	101,0,0,161,162,5,115,0,0,162,163,5,112,0,0,163,164,5,97,0,0,164,165,
  	5,99,0,0,165,166,5,101,0,0,166,16,1,0,0,0,167,168,5,67,0,0,168,169,5,
  	111,0,0,169,170,5,110,0,0,170,171,5,102,0,0,171,172,5,105,0,0,172,173,
  	5,103,0,0,173,174,5,117,0,0,174,175,5,114,0,0,175,176,5,97,0,0,176,177,
  	5,116,0,0,177,178,5,105,0,0,178,179,5,111,0,0,179,180,5,110,0,0,180,18,
  	1,0,0,0,181,182,5,78,0,0,182,183,5,97,0,0,183,184,5,109,0,0,184,185,5,
  	101,0,0,185,20,1,0,0,0,186,187,5,73,0,0,187,188,5,110,0,0,188,189,5,102,
  	0,0,189,190,5,111,0,0,190,22,1,0,0,0,191,192,5,69,0,0,192,193,5,120,0,
  	0,193,194,5,112,0,0,194,195,5,111,0,0,195,196,5,114,0,0,196,197,5,116,
  	0,0,197,24,1,0,0,0,198,199,5,64,0,0,199,200,5,83,0,0,200,201,5,116,0,
  	0,201,202,5,121,0,0,202,203,5,108,0,0,203,223,5,101,0,0,204,205,5,64,
  	0,0,205,206,5,115,0,0,206,207,5,116,0,0,207,208,5,121,0,0,208,209,5,108,
  	0,0,209,223,5,101,0,0,210,211,5,64,0,0,211,212,5,67,0,0,212,213,5,83,
  	0,0,213,223,5,83,0,0,214,215,5,64,0,0,215,216,5,67,0,0,216,217,5,115,
  	0,0,217,223,5,115,0,0,218,219,5,64,0,0,219,220,5,99,0,0,220,221,5,115,
  	0,0,221,223,5,115,0,0,222,198,1,0,0,0,222,204,1,0,0,0,222,210,1,0,0,0,
  	222,214,1,0,0,0,222,218,1,0,0,0,223,26,1,0,0,0,224,225,5,64,0,0,225,226,
  	5,69,0,0,226,227,5,108,0,0,227,228,5,101,0,0,228,229,5,109,0,0,229,230,
  	5,101,0,0,230,231,5,110,0,0,231,232,5,116,0,0,232,28,1,0,0,0,233,234,
  	5,64,0,0,234,235,5,86,0,0,235,236,5,97,0,0,236,237,5,114,0,0,237,30,1,
  	0,0,0,238,239,5,64,0,0,239,240,5,72,0,0,240,241,5,116,0,0,241,242,5,109,
  	0,0,242,243,5,108,0,0,243,32,1,0,0,0,244,245,5,64,0,0,245,246,5,74,0,
  	0,246,247,5,97,0,0,247,248,5,118,0,0,248,249,5,97,0,0,249,250,5,83,0,
  	0,250,251,5,99,0,0,251,252,5,114,0,0,252,253,5,105,0,0,253,254,5,112,
  	0,0,254,255,5,116,0,0,255,34,1,0,0,0,256,257,5,64,0,0,257,258,5,67,0,
  	0,258,259,5,104,0,0,259,260,5,116,0,0,260,261,5,108,0,0,261,36,1,0,0,
  	0,262,263,5,105,0,0,263,264,5,110,0,0,264,265,5,104,0,0,265,266,5,101,
  	0,0,266,267,5,114,0,0,267,268,5,105,0,0,268,269,5,116,0,0,269,38,1,0,
  	0,0,270,271,5,100,0,0,271,272,5,101,0,0,272,273,5,108,0,0,273,274,5,101,
  	0,0,274,275,5,116,0,0,275,276,5,101,0,0,276,40,1,0,0,0,277,278,5,105,
  	0,0,278,279,5,110,0,0,279,280,5,115,0,0,280,281,5,101,0,0,281,282,5,114,
  	0,0,282,283,5,116,0,0,283,42,1,0,0,0,284,285,5,97,0,0,285,286,5,102,0,
  	0,286,287,5,116,0,0,287,288,5,101,0,0,288,289,5,114,0,0,289,44,1,0,0,
  	0,290,291,5,98,0,0,291,292,5,101,0,0,292,293,5,102,0,0,293,294,5,111,
  	0,0,294,295,5,114,0,0,295,296,5,101,0,0,296,46,1,0,0,0,297,298,5,114,
  	0,0,298,299,5,101,0,0,299,300,5,112,0,0,300,301,5,108,0,0,301,302,5,97,
  	0,0,302,303,5,99,0,0,303,304,5,101,0,0,304,48,1,0,0,0,305,306,5,97,0,
  	0,306,307,5,116,0,0,307,50,1,0,0,0,308,309,5,116,0,0,309,310,5,111,0,
  	0,310,311,5,112,0,0,311,52,1,0,0,0,312,313,5,98,0,0,313,314,5,111,0,0,
  	314,315,5,116,0,0,315,316,5,116,0,0,316,317,5,111,0,0,317,318,5,109,0,
  	0,318,54,1,0,0,0,319,320,5,102,0,0,320,321,5,114,0,0,321,322,5,111,0,
  	0,322,323,5,109,0,0,323,56,1,0,0,0,324,325,5,97,0,0,325,326,5,115,0,0,
  	326,58,1,0,0,0,327,328,5,101,0,0,328,329,5,120,0,0,329,330,5,99,0,0,330,
  	331,5,101,0,0,331,332,5,112,0,0,332,333,5,116,0,0,333,60,1,0,0,0,334,
  	335,5,116,0,0,335,336,5,114,0,0,336,337,5,117,0,0,337,344,5,101,0,0,338,
  	339,5,102,0,0,339,340,5,97,0,0,340,341,5,108,0,0,341,342,5,115,0,0,342,
  	344,5,101,0,0,343,334,1,0,0,0,343,338,1,0,0,0,344,62,1,0,0,0,345,346,
  	5,58,0,0,346,64,1,0,0,0,347,348,5,59,0,0,348,66,1,0,0,0,349,350,5,61,
  	0,0,350,68,1,0,0,0,351,352,5,44,0,0,352,70,1,0,0,0,353,354,5,46,0,0,354,
  	72,1,0,0,0,355,356,5,35,0,0,356,74,1,0,0,0,357,358,5,38,0,0,358,76,1,
  	0,0,0,359,360,5,45,0,0,360,78,1,0,0,0,361,362,5,123,0,0,362,80,1,0,0,
  	0,363,364,5,125,0,0,364,82,1,0,0,0,365,366,5,91,0,0,366,84,1,0,0,0,367,
  	368,5,93,0,0,368,86,1,0,0,0,369,370,5,40,0,0,370,88,1,0,0,0,371,372,5,
  	41,0,0,372,90,1,0,0,0,373,374,5,47,0,0,374,375,5,47,0,0,375,379,1,0,0,
  	0,376,378,8,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,
  	380,1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,383,6,45,0,0,383,92,1,
  	0,0,0,384,385,5,47,0,0,385,386,5,42,0,0,386,390,1,0,0,0,387,389,9,0,0,
  	0,388,387,1,0,0,0,389,392,1,0,0,0,390,391,1,0,0,0,390,388,1,0,0,0,391,
  	393,1,0,0,0,392,390,1,0,0,0,393,394,5,42,0,0,394,395,5,47,0,0,395,396,
  	1,0,0,0,396,397,6,46,0,0,397,94,1,0,0,0,398,399,5,45,0,0,399,400,5,45,
  	0,0,400,404,1,0,0,0,401,403,8,0,0,0,402,401,1,0,0,0,403,406,1,0,0,0,404,
  	402,1,0,0,0,404,405,1,0,0,0,405,96,1,0,0,0,406,404,1,0,0,0,407,413,5,
  	34,0,0,408,412,8,1,0,0,409,410,5,92,0,0,410,412,9,0,0,0,411,408,1,0,0,
  	0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,
  	416,1,0,0,0,415,413,1,0,0,0,416,417,5,34,0,0,417,98,1,0,0,0,418,424,5,
  	39,0,0,419,423,8,2,0,0,420,421,5,92,0,0,421,423,9,0,0,0,422,419,1,0,0,
  	0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,
  	427,1,0,0,0,426,424,1,0,0,0,427,428,5,39,0,0,428,100,1,0,0,0,429,433,
  	7,3,0,0,430,432,7,4,0,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,
  	0,433,434,1,0,0,0,434,102,1,0,0,0,435,433,1,0,0,0,436,438,7,5,0,0,437,
  	436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,447,1,
  	0,0,0,441,443,5,46,0,0,442,444,7,5,0,0,443,442,1,0,0,0,444,445,1,0,0,
  	0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,441,1,0,0,0,447,
  	448,1,0,0,0,448,104,1,0,0,0,449,451,8,6,0,0,450,449,1,0,0,0,451,452,1,
  	0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,106,1,0,0,0,454,456,7,7,0,0,
  	455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,459,
  	1,0,0,0,459,460,6,53,1,0,460,108,1,0,0,0,16,0,222,343,379,390,404,411,
  	413,422,424,433,439,445,447,452,457,2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  chtllexerLexerStaticData = staticData.release();
}

}

CHTLLexer::CHTLLexer(CharStream *input) : Lexer(input) {
  CHTLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *chtllexerLexerStaticData->atn, chtllexerLexerStaticData->decisionToDFA, chtllexerLexerStaticData->sharedContextCache);
}

CHTLLexer::~CHTLLexer() {
  delete _interpreter;
}

std::string CHTLLexer::getGrammarFileName() const {
  return "CHTL.g4";
}

const std::vector<std::string>& CHTLLexer::getRuleNames() const {
  return chtllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CHTLLexer::getChannelNames() const {
  return chtllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CHTLLexer::getModeNames() const {
  return chtllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CHTLLexer::getVocabulary() const {
  return chtllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CHTLLexer::getSerializedATN() const {
  return chtllexerLexerStaticData->serializedATN;
}

const atn::ATN& CHTLLexer::getATN() const {
  return *chtllexerLexerStaticData->atn;
}




void CHTLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  chtllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(chtllexerLexerOnceFlag, chtllexerLexerInitialize);
#endif
}
