cmake_minimum_required(VERSION 3.16)
project(CHTL VERSION 1.0.0 LANGUAGES CXX)

# C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")

# 输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# 查找Java（用于运行ANTLR）
find_package(Java QUIET COMPONENTS Runtime)

# 查找ANTLR4运行时（仅用于CSS/JS）
find_package(antlr4-runtime QUIET)

# 定义宏
if(antlr4-runtime_FOUND)
    add_definitions(-DUSE_ANTLR4_FOR_CSS_JS)
    message(STATUS "Using ANTLR4 for CSS/JS parsing")
else()
    message(STATUS "ANTLR4 not found, using simplified CSS/JS parsers")
endif()

# 包含目录
include_directories(
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/include
)

# CHTL核心源文件（独立实现）
file(GLOB_RECURSE CHTL_CORE_SOURCES
    src/chtl/core/*.cpp
    src/chtl/generator/*.cpp
    src/chtl/scanner/*.cpp
    src/chtl/template/*.cpp
    src/chtl/custom/*.cpp
    src/chtl/origin/*.cpp
    src/chtl/import/*.cpp
    src/chtl/namespace/*.cpp
    src/chtl/constraint/*.cpp
    src/chtl/module/*.cpp
    src/chtl/optimizer/*.cpp
    src/chtl/error/*.cpp
    src/chtl/utils/*.cpp
    src/chtl/config/*.cpp
)

# CHTL独立解析器
file(GLOB_RECURSE CHTL_STANDALONE_PARSER_SOURCES
    src/chtl/parser/standalone/ParserRuntime.cpp
    src/chtl/parser/standalone/CHTLLexer.cpp
    src/chtl/parser/standalone/CHTLParser.cpp
)

# 配置解析器（独立实现）
file(GLOB_RECURSE CONFIG_PARSER_SOURCES
    src/chtl/parser/standalone/ConfigLexer.cpp
    src/chtl/parser/standalone/ConfigParser.cpp
)

# CSS/JS解析器源文件
if(antlr4-runtime_FOUND)
    # 使用ANTLR4生成的CSS/JS解析器
    file(GLOB_RECURSE CSS_PARSER_SOURCES
        generated/css/*.cpp
        src/chtl/CHTLCSSCompiler.cpp
    )
    
    file(GLOB_RECURSE JS_PARSER_SOURCES
        generated/javascript/*.cpp
        generated/chtljs/*.cpp
        src/chtl/CHTLJSCompiler.cpp
        src/chtl/CHTLJSOptimizer.cpp
    )
else()
    # 使用简化的CSS/JS解析器
    file(GLOB_RECURSE CSS_PARSER_SOURCES
        src/chtl/parser/standalone/CSSParser.cpp
        src/chtl/parser/standalone/SimpleCSSCompiler.cpp
    )
    
    file(GLOB_RECURSE JS_PARSER_SOURCES
        src/chtl/parser/standalone/JSParser.cpp
        src/chtl/parser/standalone/SimpleJSCompiler.cpp
    )
endif()

# 主程序源文件
set(CHTL_MAIN_SOURCES
    src/chtl/CHTL.cpp
    src/chtl/CHTLCompiler.cpp
    src/chtl/CHTLContext.cpp
    src/chtl/CHTLImport.cpp
    src/chtl/CHTLNamespace.cpp
    src/chtl/CHTLTemplate.cpp
    src/chtl/CHTLCustom.cpp
    src/chtl/CHTLOrigin.cpp
    src/chtl/CHTLConstraint.cpp
    src/chtl/CHTLCMOD.cpp
    src/chtl/CHTLCJMOD.cpp
    src/main.cpp
)

# 创建核心库
add_library(chtl_core STATIC
    ${CHTL_CORE_SOURCES}
    ${CHTL_STANDALONE_PARSER_SOURCES}
    ${CONFIG_PARSER_SOURCES}
)

# 创建CSS/JS解析库
add_library(chtl_css_js STATIC
    ${CSS_PARSER_SOURCES}
    ${JS_PARSER_SOURCES}
)

# 如果使用ANTLR4，链接运行时库
if(antlr4-runtime_FOUND)
    target_link_libraries(chtl_css_js PUBLIC antlr4-runtime)
endif()

# 创建可执行文件
add_executable(chtl
    ${CHTL_MAIN_SOURCES}
)

# 链接库
target_link_libraries(chtl
    chtl_core
    chtl_css_js
    pthread
)

# 安装规则
install(TARGETS chtl
    RUNTIME DESTINATION bin
)

install(DIRECTORY include/chtl
    DESTINATION include
)

# 模块
install(DIRECTORY ${CMAKE_SOURCE_DIR}/module
    DESTINATION share/chtl
)

# 示例
install(DIRECTORY ${CMAKE_SOURCE_DIR}/examples
    DESTINATION share/chtl
)

# 文档
install(DIRECTORY ${CMAKE_SOURCE_DIR}/docs
    DESTINATION share/chtl
)

# 测试
enable_testing()

# 单元测试
file(GLOB_RECURSE TEST_SOURCES tests/unit/*.cpp)
foreach(test_source ${TEST_SOURCES})
    get_filename_component(test_name ${test_source} NAME_WE)
    add_executable(${test_name} ${test_source})
    target_link_libraries(${test_name} chtl_core chtl_css_js pthread)
    add_test(NAME ${test_name} COMMAND ${test_name})
endforeach()

# 显示配置信息
message(STATUS "")
message(STATUS "CHTL Configuration:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  CHTL Parser: Standalone (No ANTLR4)")
message(STATUS "  Config Parser: Standalone (No ANTLR4)")
if(antlr4-runtime_FOUND)
    message(STATUS "  CSS Parser: ANTLR4")
    message(STATUS "  JS Parser: ANTLR4")
else()
    message(STATUS "  CSS Parser: Simplified")
    message(STATUS "  JS Parser: Simplified")
endif()
message(STATUS "")