[Import] @CJmod from "builtin:pipeline";

div {
    h1 { "Pipeline Operator Example" }
    
    div {
        h2 { "Input" }
        input #textInput {
            type: "text"
            placeholder: "Type something..."
            value: "hello world"
        }
    }
    
    div {
        h2 { "Transformations" }
        p { "Original: " span #original {} }
        p { "Uppercase: " span #uppercase {} }
        p { "Trimmed & Upper: " span #trimmedUpper {} }
        p { "Word Count: " span #wordCount {} }
    }
    
    div {
        h2 { "Array Operations" }
        p { "Numbers: " span #numbers {} }
        p { "Doubled: " span #doubled {} }
        p { "Even only: " span #evens {} }
        p { "Sum: " span #sum {} }
    }
    
    script {
        // 使用管道操作符处理字符串
        function updateText() {
            let text = {{#textInput}}.value;
            
            // 原始文本
            {{#original}}.textContent = text;
            
            // 使用管道操作符转换
            let upper = text |> trim |> toUpperCase;
            {{#uppercase}}.textContent = upper;
            
            // 链式管道
            let result = text 
                |> trim 
                |> toUpperCase 
                |> split(' ')
                |> join('-');
            {{#trimmedUpper}}.textContent = result;
            
            // 字数统计
            let count = text 
                |> trim 
                |> split(' ')
                |> (arr => arr.filter(word => word.length > 0))
                |> (arr => arr.length);
            {{#wordCount}}.textContent = count;
        }
        
        // 数组操作示例
        function demoArrays() {
            let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            {{#numbers}}.textContent = numbers.join(', ');
            
            // 数组映射管道
            let doubled = numbers |>> multiply(2);
            {{#doubled}}.textContent = doubled.join(', ');
            
            // 数组过滤管道
            let evens = numbers |?> (n => n % 2 === 0);
            {{#evens}}.textContent = evens.join(', ');
            
            // 组合操作
            let sum = numbers
                |?> (n => n % 2 === 0)  // 只要偶数
                |>> multiply(2)          // 乘以2
                |> (arr => arr.reduce(add, 0));  // 求和
            {{#sum}}.textContent = sum;
        }
        
        // 函数组合示例
        let processText = trim >> toUpperCase >> split(' ');
        
        // 部分应用示例
        let addFive = add(?, 5);
        let multiplyByTwo = multiply(2, ?);
        
        // 事件监听
        {{#textInput}}->oninput = updateText;
        
        // 初始化
        updateText();
        demoArrays();
    }
}

[Style] {
    body {
        font-family: Arial, sans-serif;
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }
    
    h1 {
        color: #333;
        border-bottom: 2px solid #007bff;
        padding-bottom: 10px;
    }
    
    h2 {
        color: #555;
        margin-top: 30px;
    }
    
    input {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    p {
        margin: 10px 0;
        padding: 10px;
        background: #f5f5f5;
        border-radius: 4px;
    }
    
    span {
        font-weight: bold;
        color: #007bff;
    }
    
    #numbers, #doubled, #evens {
        font-family: monospace;
    }
    
    #sum {
        font-size: 1.2em;
        color: #28a745;
    }
}