// 使用响应式模块
[Import] @CJmod reactive

body {
    div {
        id: "app";
        
        h1 { text { "响应式计数器" } }
        
        div {
            id: "counter-display";
            script {
                // 使用 CJmod 提供的响应式语法
                count := 0;
                doubled => count.value * 2;
                
                // 监听变化并更新显示
                watch count -> {
                    {{&}}.innerHTML = `
                        <p>计数: ${count.value}</p>
                        <p>双倍: ${doubled.value}</p>
                    `;
                };
                
                // 初始渲染
                count.value = count.value; // 触发更新
            }
        }
        
        button {
            text { "增加" }
            script {
                {{&}}->listen("click", () => {
                    count.value++;
                });
            }
        }
        
        button {
            text { "减少" }
            script {
                {{&}}->listen("click", () => {
                    count.value--;
                });
            }
        }
        
        // 输入框双向绑定
        div {
            style { margin-top: 20px; }
            
            label {
                text { "你的名字: " }
                input {
                    type: "text";
                    id: "name-input";
                    
                    script {
                        name := "";
                        
                        // 使用 CJmod 提供的双向绑定
                        {{&}}->bindModel("name");
                        
                        watch name -> {
                            {{#greeting}}.textContent = name.value 
                                ? `你好, ${name.value}!` 
                                : "请输入你的名字";
                        };
                    }
                }
            }
            
            p {
                id: "greeting";
                text { "请输入你的名字" }
            }
        }
    }
}

// 使用增强的 {{&}} 语法（如果启用了 enhanced-self 模块）
[Import] @CJmod enhanced-self

body {
    div {
        class: "demo";
        
        script {
            // 现在 {{&}} 返回的是 jQuery 风格的包装对象
            {{&}}
                ->addClass("active")
                ->on("click", () => console.log("Clicked!"))
                ->on("mouseenter", () => {{&}}->addClass("hover"))
                ->on("mouseleave", () => {{&}}->removeClass("hover"));
        }
    }
}