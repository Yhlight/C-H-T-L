// CHTL v2 综合语法测试
// 测试所有支持的 CHTL 语法特性

// ========== 1. 导入声明 ==========

[Import] @Style "styles/theme.css"
[Import] @JavaScript "scripts/utils.js"
[Import] @Chtl "components/header.chtl"
[Import] @Element CHTL::Forms/Input
[Import] @Element "custom-button.chtl" as CustomButton

// ========== 2. 全局样式 ==========

<style>
    :root {
        --primary-color: #007bff;
        --secondary-color: #6c757d;
        --font-family: system-ui, -apple-system, sans-serif;
    }
    
    * {
        box-sizing: border-box;
    }
    
    body {
        margin: 0;
        padding: 0;
        font-family: var(--font-family);
        line-height: 1.6;
        color: #333;
    }
    
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }
</style>

// ========== 3. 模板定义 ==========

// 3.1 元素模板
[Template] @Element Card(title, content, footer)
{
    div .card
    {
        h3 .card-header { {{title}} }
        div .card-body { {{content}} }
        
        // 条件渲染（如果有 footer）
        {{#if footer}}
            div .card-footer { {{footer}} }
        {{/if}}
        
        style {
            .card {
                border: 1px solid #ddd;
                border-radius: 8px;
                overflow: hidden;
                margin-bottom: 20px;
            }
            
            .card-header {
                background: var(--primary-color);
                color: white;
                padding: 16px;
                margin: 0;
            }
            
            &:hover {
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                transform: translateY(-2px);
                transition: all 0.3s ease;
            }
        }
    }
}

// 3.2 样式模板
[Template] @Style ButtonTheme(color, hoverColor)
{
    background-color: {{color}};
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    
    &:hover {
        background-color: {{hoverColor}};
    }
    
    &:active {
        transform: scale(0.98);
    }
}

// 3.3 变量模板
[Template] @Var spacing = {
    small: "8px",
    medium: "16px",
    large: "24px"
}

// ========== 4. HTML 结构 ==========

<!DOCTYPE html>
html lang="zh-CN"
{
    head
    {
        meta charset="UTF-8"
        meta name="viewport" content="width=device-width, initial-scale=1.0"
        title { "CHTL v2 综合语法测试" }
        
        // 额外的元标签
        meta name="description" content="测试所有 CHTL 语法特性"
        meta name="keywords" content="CHTL, 模板, 组件"
    }
    
    body
    {
        // ========== 5. 顶级元素和属性 ==========
        
        header #main-header .site-header role="banner"
        {
            div .container
            {
                h1 { "CHTL v2 语法测试" }
                nav
                {
                    ul .nav-list
                    {
                        li { a href="#features" { "特性" } }
                        li { a href="#templates" { "模板" } }
                        li { a href="#components" { "组件" } }
                    }
                    
                    style {
                        .nav-list {
                            list-style: none;
                            display: flex;
                            gap: 20px;
                            padding: 0;
                        }
                        
                        a {
                            text-decoration: none;
                            color: var(--primary-color);
                        }
                        
                        &:hover a {
                            text-decoration: underline;
                        }
                    }
                }
            }
            
            style {
                background: #f8f9fa;
                padding: 20px 0;
                border-bottom: 1px solid #dee2e6;
            }
        }
        
        // ========== 6. 主内容区 ==========
        
        main .container
        {
            // 6.1 使用模板
            section #features
            {
                h2 { "核心特性" }
                
                @Card("状态驱动", "智能的状态机系统", "v2.0 新特性")
                @Card("模块化设计", "四个独立编译器协同工作")
                @Card("无限扩展", "通过 CJMOD 实现语法扩展", "即将推出")
            }
            
            // 6.2 局部样式和脚本
            section #interactive
            {
                h2 { "交互示例" }
                
                div .demo-box #demo
                {
                    button .btn-primary #click-me { "点击我" }
                    div .result #result { "等待点击..." }
                    
                    style {
                        .demo-box {
                            border: 2px dashed var(--secondary-color);
                            padding: var(spacing.large);
                            text-align: center;
                        }
                        
                        .btn-primary {
                            @ButtonTheme(var(--primary-color), #0056b3)
                        }
                        
                        #result {
                            margin-top: 20px;
                            font-size: 18px;
                        }
                        
                        &.active {
                            background-color: #e3f2fd;
                        }
                    }
                    
                    script {
                        // CHTL-JS 语法
                        let clickCount = 0;
                        
                        {{#click-me}}.listen('click', () => {
                            clickCount++;
                            {{#result}}.textContent = `点击了 ${clickCount} 次`;
                            {{&}}.classList.add('active');
                            
                            // 使用 {{&}} 引用当前元素
                            console.log('Demo box:', {{&}});
                        });
                        
                        // 标准 JavaScript
                        setTimeout(() => {
                            console.log('页面加载完成');
                        }, 1000);
                    }
                }
            }
            
            // 6.3 嵌套结构
            section #nested
            {
                h2 { "嵌套示例" }
                
                div .grid
                {
                    div .grid-item
                    {
                        h3 { "项目 1" }
                        p { "这是第一个网格项目" }
                        
                        div .sub-grid
                        {
                            span .tag { "标签1" }
                            span .tag { "标签2" }
                            span .tag { "标签3" }
                        }
                    }
                    
                    div .grid-item
                    {
                        h3 { "项目 2" }
                        p { "这是第二个网格项目" }
                        
                        ul
                        {
                            li { "子项 A" }
                            li { "子项 B" }
                            li { "子项 C" }
                        }
                    }
                    
                    style {
                        .grid {
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                            gap: 20px;
                            margin: 20px 0;
                        }
                        
                        .grid-item {
                            background: #f8f9fa;
                            padding: 20px;
                            border-radius: 8px;
                        }
                        
                        .tag {
                            display: inline-block;
                            background: var(--secondary-color);
                            color: white;
                            padding: 4px 8px;
                            border-radius: 4px;
                            margin-right: 8px;
                            font-size: 12px;
                        }
                    }
                }
            }
            
            // 6.4 表单示例
            section #forms
            {
                h2 { "表单元素" }
                
                form #contact-form
                {
                    div .form-group
                    {
                        label for="name" { "姓名" }
                        input #name type="text" required placeholder="请输入姓名"
                    }
                    
                    div .form-group
                    {
                        label for="email" { "邮箱" }
                        input #email type="email" required placeholder="name@example.com"
                    }
                    
                    div .form-group
                    {
                        label for="message" { "留言" }
                        textarea #message rows="4" placeholder="请输入留言内容"
                    }
                    
                    button type="submit" .btn-primary { "提交" }
                    
                    style {
                        .form-group {
                            margin-bottom: 16px;
                        }
                        
                        label {
                            display: block;
                            margin-bottom: 4px;
                            font-weight: bold;
                        }
                        
                        input, textarea {
                            width: 100%;
                            padding: 8px 12px;
                            border: 1px solid #ced4da;
                            border-radius: 4px;
                            font-size: 16px;
                        }
                        
                        input:focus, textarea:focus {
                            outline: none;
                            border-color: var(--primary-color);
                            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
                        }
                    }
                    
                    script {
                        {{#contact-form}}.listen('submit', (e) => {
                            e.preventDefault();
                            
                            const formData = {
                                name: {{#name}}.value,
                                email: {{#email}}.value,
                                message: {{#message}}.value
                            };
                            
                            console.log('表单数据:', formData);
                            alert('表单提交成功！（演示）');
                            
                            // 重置表单
                            {{&}}.reset();
                        });
                    }
                }
            }
            
            // 6.5 复杂组件
            section #complex
            {
                h2 { "复杂组件示例" }
                
                div .tabs #tab-container
                {
                    div .tab-nav
                    {
                        button .tab-btn .active data-tab="tab1" { "标签 1" }
                        button .tab-btn data-tab="tab2" { "标签 2" }
                        button .tab-btn data-tab="tab3" { "标签 3" }
                    }
                    
                    div .tab-content
                    {
                        div .tab-pane .active #tab1
                        {
                            h3 { "标签 1 内容" }
                            p { "这是第一个标签页的内容。" }
                        }
                        
                        div .tab-pane #tab2
                        {
                            h3 { "标签 2 内容" }
                            p { "这是第二个标签页的内容。" }
                        }
                        
                        div .tab-pane #tab3
                        {
                            h3 { "标签 3 内容" }
                            p { "这是第三个标签页的内容。" }
                        }
                    }
                    
                    style {
                        .tabs {
                            margin: 20px 0;
                        }
                        
                        .tab-nav {
                            display: flex;
                            border-bottom: 2px solid #dee2e6;
                        }
                        
                        .tab-btn {
                            background: none;
                            border: none;
                            padding: 12px 24px;
                            cursor: pointer;
                            font-size: 16px;
                            position: relative;
                        }
                        
                        .tab-btn.active {
                            color: var(--primary-color);
                        }
                        
                        .tab-btn.active::after {
                            content: '';
                            position: absolute;
                            bottom: -2px;
                            left: 0;
                            right: 0;
                            height: 2px;
                            background: var(--primary-color);
                        }
                        
                        .tab-content {
                            padding: 20px 0;
                        }
                        
                        .tab-pane {
                            display: none;
                        }
                        
                        .tab-pane.active {
                            display: block;
                        }
                    }
                    
                    script {
                        const tabBtns = {{&}}.querySelectorAll('.tab-btn');
                        const tabPanes = {{&}}.querySelectorAll('.tab-pane');
                        
                        tabBtns.forEach(btn => {
                            btn.addEventListener('click', () => {
                                const targetTab = btn.dataset.tab;
                                
                                // 移除所有 active 类
                                tabBtns.forEach(b => b.classList.remove('active'));
                                tabPanes.forEach(p => p.classList.remove('active'));
                                
                                // 添加 active 类到当前项
                                btn.classList.add('active');
                                {{#[targetTab]}}.classList.add('active');
                            });
                        });
                    }
                }
            }
        }
        
        // ========== 7. 页脚 ==========
        
        footer .site-footer
        {
            div .container
            {
                p { "© 2024 CHTL Project. All rights reserved." }
                p { 
                    "使用 CHTL v2 构建 | " 
                    a href="https://github.com/chtl" { "GitHub" }
                }
            }
            
            style {
                background: #343a40;
                color: white;
                text-align: center;
                padding: 40px 0;
                margin-top: 60px;
                
                a {
                    color: #17a2b8;
                }
            }
        }
        
        // ========== 8. 全局脚本 ==========
        
        <script>
            // 页面加载完成后执行
            document.addEventListener('DOMContentLoaded', () => {
                console.log('CHTL v2 综合测试页面加载完成');
                
                // 添加平滑滚动
                document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    anchor.addEventListener('click', function (e) {
                        e.preventDefault();
                        const target = document.querySelector(this.getAttribute('href'));
                        if (target) {
                            target.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            });
                        }
                    });
                });
            });
        </script>
    }
}