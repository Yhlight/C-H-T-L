// CHTL Script块中的 {{&}} 语法示例
// {{&}} 会自动替换为 this，表示当前元素

Import @Chtl from "Chtholly.Core.*"

// 1. 基础用法 - {{&}} 表示当前元素
div {
    id: "example1"
    class: "clickable"
    "点击我！"
    
    script {
        // {{&}} 会被替换为 this
        {{&}}.addEventListener('click', function() {
            console.log('Clicked:', {{&}}.id);
            {{&}}.style.backgroundColor = '#67C3CC';
        });
    }
    
    style {
        .clickable {
            padding: 20px;
            cursor: pointer;
            border: 1px solid #ddd;
            transition: all 0.3s;
        }
    }
}

// 2. 在组件中使用 {{&}}
[Custom] @Element ColorBox {
    props: {
        color: string = "#67C3CC"
    }
    
    render: {
        div {
            class: "color-box"
            data-color: props.color
            
            "双击改变颜色"
            
            script {
                // 使用 {{&}} 获取和操作当前元素
                {{&}}.style.backgroundColor = {{&}}.dataset.color;
                
                {{&}}.addEventListener('dblclick', function() {
                    // 生成随机颜色
                    const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16);
                    {{&}}.style.backgroundColor = randomColor;
                    {{&}}.dataset.color = randomColor;
                });
                
                // 悬停效果
                {{&}}.addEventListener('mouseenter', () => {
                    {{&}}.style.transform = 'scale(1.05)';
                });
                
                {{&}}.addEventListener('mouseleave', () => {
                    {{&}}.style.transform = 'scale(1)';
                });
            }
            
            style {
                .color-box {
                    width: 200px;
                    height: 100px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    border-radius: 8px;
                    transition: transform 0.2s;
                    cursor: pointer;
                    margin: 10px;
                }
            }
        }
    }
}

// 3. {{&}} 与子元素交互
div {
    class: "parent-container"
    
    h3 { "父元素容器" }
    
    button {
        class: "add-child"
        "添加子元素"
    }
    
    div {
        class: "children-area"
    }
    
    script {
        // {{&}} 指向包含此script块的div
        const button = {{&}}.querySelector('.add-child');
        const childrenArea = {{&}}.querySelector('.children-area');
        
        button.addEventListener('click', () => {
            const child = document.createElement('div');
            child.className = 'child-item';
            child.textContent = `子元素 ${childrenArea.children.length + 1}`;
            childrenArea.appendChild(child);
            
            // 更新父元素的数据属性
            {{&}}.dataset.childCount = childrenArea.children.length;
        });
    }
    
    style {
        .parent-container {
            border: 2px solid #67C3CC;
            padding: 20px;
            margin: 20px 0;
        }
        
        .children-area {
            min-height: 100px;
            background: #f5f5f5;
            padding: 10px;
            margin-top: 10px;
        }
        
        .child-item {
            display: inline-block;
            padding: 5px 10px;
            margin: 5px;
            background: #67C3CC;
            color: white;
            border-radius: 4px;
        }
    }
}

// 4. 多个script块共享 {{&}} 上下文
div {
    class: "multi-script"
    data-count: "0"
    
    h3 { "多个Script块示例" }
    
    // 第一个script块 - 初始化
    script {
        // 初始化计数显示
        const countDisplay = document.createElement('div');
        countDisplay.className = 'count-display';
        countDisplay.textContent = `计数: ${{{&}}.dataset.count}`;
        {{&}}.appendChild(countDisplay);
    }
    
    button {
        class: "increment"
        "增加"
    }
    
    button {
        class: "decrement"
        "减少"
    }
    
    // 第二个script块 - 事件处理
    script {
        // {{&}} 仍然指向同一个父div
        const incrementBtn = {{&}}.querySelector('.increment');
        const decrementBtn = {{&}}.querySelector('.decrement');
        const display = {{&}}.querySelector('.count-display');
        
        incrementBtn.addEventListener('click', () => {
            let count = parseInt({{&}}.dataset.count) + 1;
            {{&}}.dataset.count = count;
            display.textContent = `计数: ${count}`;
        });
        
        decrementBtn.addEventListener('click', () => {
            let count = parseInt({{&}}.dataset.count) - 1;
            {{&}}.dataset.count = count;
            display.textContent = `计数: ${count}`;
        });
    }
    
    style {
        .multi-script {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .count-display {
            font-size: 24px;
            margin: 20px 0;
            font-weight: bold;
        }
        
        button {
            margin-right: 10px;
            padding: 8px 16px;
            background: #67C3CC;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        button:hover {
            background: #5AB3BC;
        }
    }
}

// 5. {{&}} 在嵌套结构中的作用域
div {
    class: "outer"
    
    h3 { "外层元素" }
    
    script {
        console.log('外层script - {{&}}指向:', {{&}}.className); // "outer"
        {{&}}.style.border = '2px solid #67C3CC';
    }
    
    div {
        class: "inner"
        
        "内层元素"
        
        script {
            console.log('内层script - {{&}}指向:', {{&}}.className); // "inner"
            {{&}}.style.background = '#f0f8ff';
            {{&}}.style.padding = '10px';
            {{&}}.style.margin = '10px';
        }
    }
}

// 6. 使用 {{&}} 创建自定义行为
[Custom] @Element Tooltip {
    props: {
        text: string = "提示信息"
        position: string = "top"
    }
    
    render: {
        div {
            class: "tooltip-container"
            
            [children]
            
            div {
                class: ["tooltip", "tooltip-" + props.position]
                props.text
            }
            
            script {
                const tooltip = {{&}}.querySelector('.tooltip');
                
                // 显示/隐藏提示
                {{&}}.addEventListener('mouseenter', () => {
                    tooltip.style.display = 'block';
                    
                    // 计算位置
                    const rect = {{&}}.getBoundingClientRect();
                    if (props.position === 'top') {
                        tooltip.style.bottom = '100%';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                    }
                });
                
                {{&}}.addEventListener('mouseleave', () => {
                    tooltip.style.display = 'none';
                });
            }
            
            style {
                .tooltip-container {
                    position: relative;
                    display: inline-block;
                }
                
                .tooltip {
                    display: none;
                    position: absolute;
                    background: #333;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 4px;
                    font-size: 14px;
                    white-space: nowrap;
                    z-index: 1000;
                }
                
                .tooltip-top {
                    margin-bottom: 5px;
                }
                
                .tooltip::after {
                    content: '';
                    position: absolute;
                    top: 100%;
                    left: 50%;
                    margin-left: -5px;
                    border-width: 5px;
                    border-style: solid;
                    border-color: #333 transparent transparent transparent;
                }
            }
        }
    }
}

// 7. 综合示例 - 可拖拽元素
div {
    class: "draggable"
    
    "拖拽我！"
    
    script {
        let isDragging = false;
        let startX, startY, initialX, initialY;
        
        // 设置初始样式
        {{&}}.style.position = 'absolute';
        {{&}}.style.cursor = 'move';
        {{&}}.style.userSelect = 'none';
        
        {{&}}.addEventListener('mousedown', (e) => {
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            initialX = {{&}}.offsetLeft;
            initialY = {{&}}.offsetTop;
            {{&}}.style.zIndex = '1000';
        });
        
        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            
            e.preventDefault();
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            
            {{&}}.style.left = (initialX + dx) + 'px';
            {{&}}.style.top = (initialY + dy) + 'px';
        });
        
        document.addEventListener('mouseup', () => {
            isDragging = false;
            {{&}}.style.zIndex = 'auto';
        });
    }
    
    style {
        .draggable {
            width: 150px;
            height: 80px;
            background: #67C3CC;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }
        
        .draggable:active {
            box-shadow: 0 4px 16px rgba(0,0,0,0.3);
        }
    }
}

// 使用示例
@ColorBox { color: "#FF6B6B" }
@ColorBox { color: "#4ECDC4" }

@Tooltip { text: "这是一个提示" } {
    button { "悬停显示提示" }
}