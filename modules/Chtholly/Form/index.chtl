// Chtholly.Form Module
// 表单组件模块 - 提供丰富的表单控件
// "填写每一个字段，都是对未来的承诺"

[Info] {
    name: "Chtholly.Form"
    version: "1.0.0"
    description: "CHTL表单组件模块，提供各种表单控件"
    author: "CHTL Development Team"
    license: "MIT"
}

// 导入依赖
Import @Core from "Chtholly.Core.*"
Import @Utils from "Chtholly.Utils.*"

// 输入框组件
[Custom] @Element Input {
    props: {
        type: string = "text"           // text, password, email, number
        placeholder: string = ""
        value: string = ""
        onChange: function
        onFocus: function
        onBlur: function
        disabled: boolean = false
        size: string = "medium"         // small, medium, large
        prefix: any                     // 前缀内容
        suffix: any                     // 后缀内容
        allowClear: boolean = false     // 是否显示清除按钮
    }
    
    state: {
        focused: boolean = false
        hovered: boolean = false
        currentValue: string = props.value
    }
    
    render: {
        div {
            class: [
                "chtl-input-wrapper",
                "chtl-input-" + props.size,
                state.focused ? "focused" : "",
                props.disabled ? "disabled" : ""
            ]
            
            script {
                // 鼠标悬停效果
                {{&}}->listen({
                    mouseenter: () => {
                        this.state.hovered = true;
                        {{&}}.classList.add('hovered');
                    },
                    mouseleave: () => {
                        this.state.hovered = false;
                        {{&}}.classList.remove('hovered');
                    }
                });
            }
            
            if (props.prefix) {
                span { class: "chtl-input-prefix"; props.prefix }
            }
            
            input {
                type: props.type
                class: "chtl-input"
                placeholder: props.placeholder
                value: state.currentValue
                disabled: props.disabled
                
                script {
                    // 输入事件处理
                    {{&}}->listen({
                        input: (e) => {
                            const value = e.target.value;
                            this.state.currentValue = value;
                            {{props.onChange}}?.(value);
                            
                            // 更新清除按钮显示
                            if ({{props.allowClear}}) {
                                const clearBtn = {{".chtl-input-clear"}};
                                if (clearBtn) {
                                    clearBtn.style.display = value ? 'flex' : 'none';
                                }
                            }
                        },
                        
                        focus: (e) => {
                            this.state.focused = true;
                            {{".chtl-input-wrapper"}}->classList.add('focused');
                            {{props.onFocus}}?.(e);
                            
                            // 选中效果动画
                            {{&}}->animate({
                                duration: 300,
                                easing: 'ease-out',
                                begin: { boxShadow: '0 0 0 0 rgba(103, 195, 204, 0.2)' },
                                end: { boxShadow: '0 0 0 3px rgba(103, 195, 204, 0.2)' }
                            });
                        },
                        
                        blur: (e) => {
                            this.state.focused = false;
                            {{".chtl-input-wrapper"}}->classList.remove('focused');
                            {{props.onBlur}}?.(e);
                            
                            {{&}}.style.boxShadow = 'none';
                        },
                        
                        keydown: (e) => {
                            // 回车键提交
                            if (e.key === 'Enter') {
                                {{&}}.blur();
                            }
                        }
                    });
                }
            }
            
            if (props.allowClear && state.currentValue) {
                span {
                    class: "chtl-input-clear"
                    style: { display: state.currentValue ? "flex" : "none" }
                    
                    script {
                        {{&}}->listen({
                            click: () => {
                                {{".chtl-input"}}.value = '';
                                {{".chtl-input"}}.focus();
                                this.state.currentValue = '';
                                {{props.onChange}}?.('');
                                {{&}}.style.display = 'none';
                            }
                        });
                    }
                    
                    "×"
                }
            }
            
            if (props.suffix) {
                span { class: "chtl-input-suffix"; props.suffix }
            }
        }
    }
}

// 开关组件
[Custom] @Element Switch {
    props: {
        checked: boolean = false
        onChange: function
        disabled: boolean = false
        size: string = "medium"
        checkedText: string = ""
        uncheckedText: string = ""
    }
    
    state: {
        isChecked: boolean = props.checked
        isAnimating: boolean = false
    }
    
    render: {
        button {
            type: "button"
            class: [
                "chtl-switch",
                "chtl-switch-" + props.size,
                state.isChecked ? "checked" : "",
                props.disabled ? "disabled" : ""
            ]
            disabled: props.disabled
            role: "switch"
            aria-checked: state.isChecked
            
            script {
                {{&}}->listen({
                    click: () => {
                        if ({{props.disabled}} || this.state.isAnimating) return;
                        
                        this.state.isAnimating = true;
                        const newChecked = !this.state.isChecked;
                        
                        // 切换动画
                        const handle = {{".chtl-switch-handle"}};
                        handle->animate({
                            duration: 200,
                            easing: 'ease-in-out',
                            begin: {
                                transform: this.state.isChecked ? 
                                    'translateX(100%)' : 'translateX(0)'
                            },
                            end: {
                                transform: newChecked ? 
                                    'translateX(100%)' : 'translateX(0)'
                            },
                            callback: () => {
                                this.state.isAnimating = false;
                            }
                        });
                        
                        // 更新状态
                        this.state.isChecked = newChecked;
                        {{&}}.classList.toggle('checked', newChecked);
                        {{&}}.setAttribute('aria-checked', newChecked);
                        
                        {{props.onChange}}?.(newChecked);
                    },
                    
                    keydown: (e) => {
                        if (e.key === ' ' || e.key === 'Enter') {
                            e.preventDefault();
                            {{&}}.click();
                        }
                    }
                });
            }
            
            span { class: "chtl-switch-inner" }
            span { 
                class: "chtl-switch-handle"
                style: {
                    transform: state.isChecked ? "translateX(100%)" : "translateX(0)"
                }
            }
            
            if (props.checkedText || props.uncheckedText) {
                span {
                    class: "chtl-switch-text"
                    state.isChecked ? props.checkedText : props.uncheckedText
                }
            }
        }
    }
}

// 复选框组件
[Custom] @Element Checkbox {
    props: {
        checked: boolean = false
        indeterminate: boolean = false
        onChange: function
        disabled: boolean = false
        value: any
        children: any
    }
    
    state: {
        isChecked: boolean = props.checked
        isIndeterminate: boolean = props.indeterminate
    }
    
    render: {
        label {
            class: [
                "chtl-checkbox-wrapper",
                props.disabled ? "disabled" : ""
            ]
            
            script {
                {{&}}->listen({
                    click: (e) => {
                        if ({{props.disabled}}) {
                            e.preventDefault();
                            return;
                        }
                    }
                });
            }
            
            span {
                class: [
                    "chtl-checkbox",
                    state.isChecked ? "checked" : "",
                    state.isIndeterminate ? "indeterminate" : ""
                ]
                
                script {
                    {{&}}->listen({
                        click: (e) => {
                            e.stopPropagation();
                            if ({{props.disabled}}) return;
                            
                            const newChecked = !this.state.isChecked;
                            this.state.isChecked = newChecked;
                            this.state.isIndeterminate = false;
                            
                            // 更新样式
                            {{&}}.classList.toggle('checked', newChecked);
                            {{&}}.classList.remove('indeterminate');
                            
                            // 勾选动画
                            const checkmark = {{".chtl-checkbox-checkmark"}};
                            if (checkmark && newChecked) {
                                checkmark->animate({
                                    duration: 200,
                                    easing: 'ease-out',
                                    begin: {
                                        opacity: 0,
                                        transform: 'scale(0) rotate(-45deg)'
                                    },
                                    end: {
                                        opacity: 1,
                                        transform: 'scale(1) rotate(-45deg)'
                                    }
                                });
                            }
                            
                            {{props.onChange}}?.(newChecked, {{props.value}});
                        }
                    });
                    
                    // 监听indeterminate属性变化
                    if ({{props.indeterminate}} !== this.state.isIndeterminate) {
                        this.state.isIndeterminate = {{props.indeterminate}};
                        {{&}}.classList.toggle('indeterminate', {{props.indeterminate}});
                    }
                }
                
                input {
                    type: "checkbox"
                    class: "chtl-checkbox-input"
                    checked: state.isChecked
                    disabled: props.disabled
                    value: props.value
                }
                
                span { 
                    class: "chtl-checkbox-inner"
                    span { class: "chtl-checkbox-checkmark" }
                }
            }
            
            if (props.children) {
                span { class: "chtl-checkbox-label"; props.children }
            }
        }
    }
}

// 滑块组件
[Custom] @Element Slider {
    props: {
        min: number = 0
        max: number = 100
        step: number = 1
        value: number = 0
        onChange: function
        onAfterChange: function
        disabled: boolean = false
        showTooltip: boolean = true
        marks: object = {}              // { 0: '0%', 50: '50%', 100: '100%' }
    }
    
    state: {
        currentValue: number = props.value
        isDragging: boolean = false
        showTooltip: boolean = false
    }
    
    render: {
        div {
            class: [
                "chtl-slider",
                props.disabled ? "disabled" : "",
                state.isDragging ? "dragging" : ""
            ]
            
            script {
                // 计算值和位置
                this.getValue = (clientX) => {
                    const rect = {{&}}.getBoundingClientRect();
                    const percent = Math.min(Math.max((clientX - rect.left) / rect.width, 0), 1);
                    const rawValue = {{props.min}} + percent * ({{props.max}} - {{props.min}});
                    return Math.round(rawValue / {{props.step}}) * {{props.step}};
                };
                
                this.updatePosition = (value) => {
                    const percent = (value - {{props.min}}) / ({{props.max}} - {{props.min}});
                    {{".chtl-slider-handle"}}.style.left = `${percent * 100}%`;
                    {{".chtl-slider-track"}}.style.width = `${percent * 100}%`;
                    
                    // 更新提示位置
                    if ({{props.showTooltip}} && this.state.showTooltip) {
                        const tooltip = {{".chtl-slider-tooltip"}};
                        if (tooltip) {
                            tooltip.style.left = `${percent * 100}%`;
                            tooltip.textContent = value;
                        }
                    }
                };
                
                // 初始化位置
                setTimeout(() => this.updatePosition(this.state.currentValue), 0);
            }
            
            // 滑轨
            div {
                class: "chtl-slider-rail"
                
                script {
                    {{&}}->listen({
                        click: (e) => {
                            if ({{props.disabled}} || state.isDragging) return;
                            
                            const value = this.getValue(e.clientX);
                            this.state.currentValue = value;
                            this.updatePosition(value);
                            {{props.onChange}}?.(value);
                            {{props.onAfterChange}}?.(value);
                        }
                    });
                }
                
                // 填充轨道
                div { 
                    class: "chtl-slider-track"
                    style: { width: ((state.currentValue - props.min) / (props.max - props.min) * 100) + "%" }
                }
                
                // 标记点
                @For {
                    each: Object.entries(props.marks)
                    as: "mark"
                    children: ({ mark }) => {
                        const [value, label] = mark;
                        const position = (value - props.min) / (props.max - props.min) * 100;
                        
                        div {
                            class: "chtl-slider-mark"
                            style: { left: position + "%" }
                            
                            span { class: "chtl-slider-mark-dot" }
                            span { class: "chtl-slider-mark-label"; label }
                        }
                    }
                }
            }
            
            // 滑块手柄
            div {
                class: "chtl-slider-handle"
                tabindex: 0
                style: { left: ((state.currentValue - props.min) / (props.max - props.min) * 100) + "%" }
                
                script {
                    {{&}}->listen({
                        mousedown: (e) => {
                            if ({{props.disabled}}) return;
                            
                            e.preventDefault();
                            this.state.isDragging = true;
                            this.state.showTooltip = true;
                            {{".chtl-slider"}}.classList.add('dragging');
                            
                            const handleMove = (e) => {
                                const value = this.getValue(e.clientX);
                                this.state.currentValue = value;
                                this.updatePosition(value);
                                {{props.onChange}}?.(value);
                            };
                            
                            const handleUp = () => {
                                this.state.isDragging = false;
                                this.state.showTooltip = false;
                                {{".chtl-slider"}}.classList.remove('dragging');
                                {{props.onAfterChange}}?.(this.state.currentValue);
                                
                                document.removeEventListener('mousemove', handleMove);
                                document.removeEventListener('mouseup', handleUp);
                            };
                            
                            document.addEventListener('mousemove', handleMove);
                            document.addEventListener('mouseup', handleUp);
                        },
                        
                        focus: () => {
                            if ({{props.showTooltip}}) {
                                this.state.showTooltip = true;
                            }
                        },
                        
                        blur: () => {
                            this.state.showTooltip = false;
                        },
                        
                        keydown: (e) => {
                            if ({{props.disabled}}) return;
                            
                            let newValue = this.state.currentValue;
                            
                            switch(e.key) {
                                case 'ArrowLeft':
                                case 'ArrowDown':
                                    e.preventDefault();
                                    newValue = Math.max({{props.min}}, newValue - {{props.step}});
                                    break;
                                case 'ArrowRight':
                                case 'ArrowUp':
                                    e.preventDefault();
                                    newValue = Math.min({{props.max}}, newValue + {{props.step}});
                                    break;
                                case 'Home':
                                    e.preventDefault();
                                    newValue = {{props.min}};
                                    break;
                                case 'End':
                                    e.preventDefault();
                                    newValue = {{props.max}};
                                    break;
                                default:
                                    return;
                            }
                            
                            this.state.currentValue = newValue;
                            this.updatePosition(newValue);
                            {{props.onChange}}?.(newValue);
                        }
                    });
                }
                
                // 提示框
                if (props.showTooltip && state.showTooltip) {
                    div {
                        class: "chtl-slider-tooltip"
                        state.currentValue
                    }
                }
            }
        }
    }
}

// 表单样式
[Style] @FormStyles {
    // 输入框样式
    .chtl-input-wrapper {
        display: inline-flex;
        align-items: center;
        position: relative;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
        transition: all 0.3s;
        background: white;
    }
    
    .chtl-input-wrapper:hover:not(.disabled) {
        border-color: #67C3CC;
    }
    
    .chtl-input-wrapper.focused {
        border-color: #67C3CC;
    }
    
    .chtl-input-wrapper.disabled {
        background: #f5f5f5;
        cursor: not-allowed;
    }
    
    .chtl-input {
        flex: 1;
        border: none;
        outline: none;
        background: transparent;
        padding: 4px 11px;
        font-size: 14px;
        line-height: 1.5;
        transition: all 0.3s;
    }
    
    .chtl-input-small .chtl-input {
        padding: 0 7px;
        font-size: 12px;
    }
    
    .chtl-input-large .chtl-input {
        padding: 6px 11px;
        font-size: 16px;
    }
    
    .chtl-input-prefix,
    .chtl-input-suffix {
        padding: 0 8px;
        color: #999;
    }
    
    .chtl-input-clear {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 8px;
        cursor: pointer;
        color: #999;
        transition: color 0.3s;
    }
    
    .chtl-input-clear:hover {
        color: #666;
    }
    
    // 开关样式
    .chtl-switch {
        position: relative;
        display: inline-flex;
        align-items: center;
        min-width: 44px;
        height: 22px;
        padding: 0;
        border: none;
        border-radius: 11px;
        background: #d9d9d9;
        cursor: pointer;
        transition: all 0.3s;
        outline: none;
    }
    
    .chtl-switch.checked {
        background: #67C3CC;
    }
    
    .chtl-switch.disabled {
        cursor: not-allowed;
        opacity: 0.4;
    }
    
    .chtl-switch-inner {
        position: absolute;
        inset: 0;
        border-radius: 11px;
    }
    
    .chtl-switch-handle {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease-in-out;
    }
    
    .chtl-switch-text {
        margin-left: 24px;
        margin-right: 8px;
        color: white;
        font-size: 12px;
    }
    
    .chtl-switch-small {
        min-width: 28px;
        height: 16px;
    }
    
    .chtl-switch-small .chtl-switch-handle {
        width: 12px;
        height: 12px;
    }
    
    .chtl-switch-large {
        min-width: 56px;
        height: 28px;
    }
    
    .chtl-switch-large .chtl-switch-handle {
        width: 24px;
        height: 24px;
    }
    
    // 复选框样式
    .chtl-checkbox-wrapper {
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        user-select: none;
    }
    
    .chtl-checkbox-wrapper.disabled {
        cursor: not-allowed;
        opacity: 0.4;
    }
    
    .chtl-checkbox {
        position: relative;
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 1px solid #d9d9d9;
        border-radius: 2px;
        background: white;
        transition: all 0.3s;
    }
    
    .chtl-checkbox:hover {
        border-color: #67C3CC;
    }
    
    .chtl-checkbox.checked {
        background: #67C3CC;
        border-color: #67C3CC;
    }
    
    .chtl-checkbox.indeterminate {
        background: #67C3CC;
        border-color: #67C3CC;
    }
    
    .chtl-checkbox-input {
        position: absolute;
        inset: 0;
        opacity: 0;
        cursor: pointer;
    }
    
    .chtl-checkbox-inner {
        position: absolute;
        inset: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chtl-checkbox-checkmark {
        display: none;
        width: 8px;
        height: 5px;
        border: 2px solid white;
        border-top: none;
        border-right: none;
        transform: rotate(-45deg);
    }
    
    .chtl-checkbox.checked .chtl-checkbox-checkmark {
        display: block;
    }
    
    .chtl-checkbox.indeterminate .chtl-checkbox-checkmark {
        display: block;
        width: 8px;
        height: 0;
        border-left: none;
        border-bottom: 2px solid white;
        transform: none;
    }
    
    .chtl-checkbox-label {
        margin-left: 8px;
    }
    
    // 滑块样式
    .chtl-slider {
        position: relative;
        height: 12px;
        padding: 5px 0;
        cursor: pointer;
    }
    
    .chtl-slider.disabled {
        cursor: not-allowed;
        opacity: 0.4;
    }
    
    .chtl-slider-rail {
        position: absolute;
        width: 100%;
        height: 4px;
        top: 50%;
        transform: translateY(-50%);
        background: #f0f0f0;
        border-radius: 2px;
    }
    
    .chtl-slider-track {
        position: absolute;
        height: 100%;
        background: #67C3CC;
        border-radius: 2px;
        transition: width 0.3s;
    }
    
    .chtl-slider.dragging .chtl-slider-track {
        transition: none;
    }
    
    .chtl-slider-handle {
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 14px;
        height: 14px;
        background: white;
        border: 2px solid #67C3CC;
        border-radius: 50%;
        cursor: grab;
        transition: all 0.3s;
    }
    
    .chtl-slider-handle:hover {
        border-width: 3px;
        box-shadow: 0 0 0 2px rgba(103, 195, 204, 0.2);
    }
    
    .chtl-slider-handle:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(103, 195, 204, 0.2);
    }
    
    .chtl-slider.dragging .chtl-slider-handle {
        cursor: grabbing;
        transform: translate(-50%, -50%) scale(1.2);
    }
    
    .chtl-slider-tooltip {
        position: absolute;
        bottom: 100%;
        left: 0;
        transform: translateX(-50%);
        margin-bottom: 8px;
        padding: 4px 8px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        font-size: 12px;
        border-radius: 4px;
        white-space: nowrap;
        pointer-events: none;
    }
    
    .chtl-slider-mark {
        position: absolute;
        top: 50%;
        transform: translateX(-50%);
    }
    
    .chtl-slider-mark-dot {
        position: absolute;
        top: -3px;
        left: 50%;
        transform: translateX(-50%);
        width: 6px;
        height: 6px;
        background: #d9d9d9;
        border-radius: 50%;
    }
    
    .chtl-slider-mark-label {
        position: absolute;
        top: 12px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
        color: #999;
        white-space: nowrap;
    }
}

// 导出表单组件
[Export] {
    @Element Input, Switch, Checkbox, Slider
    @Style FormStyles
}